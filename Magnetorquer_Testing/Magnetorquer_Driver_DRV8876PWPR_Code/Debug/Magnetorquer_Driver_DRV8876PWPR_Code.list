
Magnetorquer_Driver_DRV8876PWPR_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006764  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f0  080069f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f8  080069f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000070  08006a70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006a70  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016737  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026df  00000000  00000000  000367d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00038eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208c7  00000000  00000000  0003b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159fb  00000000  00000000  0005be37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc02f  00000000  00000000  00071832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c44  00000000  00000000  0014d8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800692c 	.word	0x0800692c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800692c 	.word	0x0800692c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2uiz>:
 8000bcc:	004a      	lsls	r2, r1, #1
 8000bce:	d211      	bcs.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd4:	d211      	bcs.n	8000bfa <__aeabi_d2uiz+0x2e>
 8000bd6:	d50d      	bpl.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d40e      	bmi.n	8000c00 <__aeabi_d2uiz+0x34>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_d2uiz+0x3a>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b974 	b.w	8000f0c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468e      	mov	lr, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14d      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	d969      	bls.n	8000d24 <__udivmoddi4+0xe8>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b152      	cbz	r2, 8000c6c <__udivmoddi4+0x30>
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	f1c2 0120 	rsb	r1, r2, #32
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c66:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	0c21      	lsrs	r1, r4, #16
 8000c72:	fbbe f6f8 	udiv	r6, lr, r8
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c82:	fb06 f107 	mul.w	r1, r6, r7
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c92:	f080 811f 	bcs.w	8000ed4 <__udivmoddi4+0x298>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 811c 	bls.w	8000ed4 <__udivmoddi4+0x298>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 f707 	mul.w	r7, r0, r7
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x92>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc0:	f080 810a 	bcs.w	8000ed8 <__udivmoddi4+0x29c>
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	f240 8107 	bls.w	8000ed8 <__udivmoddi4+0x29c>
 8000cca:	4464      	add	r4, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	1be4      	subs	r4, r4, r7
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa4>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0xc2>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80ef 	beq.w	8000ece <__udivmoddi4+0x292>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x160>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xd4>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80f9 	bhi.w	8000f02 <__udivmoddi4+0x2c6>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0303 	sbc.w	r3, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e0      	beq.n	8000ce0 <__udivmoddi4+0xa4>
 8000d1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d22:	e7dd      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xec>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f040 8092 	bne.w	8000e56 <__udivmoddi4+0x21a>
 8000d32:	eba1 010c 	sub.w	r1, r1, ip
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	2601      	movs	r6, #1
 8000d40:	0c20      	lsrs	r0, r4, #16
 8000d42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d46:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4e:	fb0e f003 	mul.w	r0, lr, r3
 8000d52:	4288      	cmp	r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x12c>
 8000d56:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x12a>
 8000d60:	4288      	cmp	r0, r1
 8000d62:	f200 80cb 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d70:	fb07 1110 	mls	r1, r7, r0, r1
 8000d74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d78:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x156>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x154>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2ca>
 8000d90:	4608      	mov	r0, r1
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	e79c      	b.n	8000cd6 <__udivmoddi4+0x9a>
 8000d9c:	f1c6 0720 	rsb	r7, r6, #32
 8000da0:	40b3      	lsls	r3, r6
 8000da2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000daa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	40f9      	lsrs	r1, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc2:	0c20      	lsrs	r0, r4, #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dda:	d90b      	bls.n	8000df4 <__udivmoddi4+0x1b8>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de4:	f080 8088 	bcs.w	8000ef8 <__udivmoddi4+0x2bc>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f240 8085 	bls.w	8000ef8 <__udivmoddi4+0x2bc>
 8000dee:	f1a8 0802 	sub.w	r8, r8, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000e00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1e2>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e14:	d26c      	bcs.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d96a      	bls.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e22:	fba0 9402 	umull	r9, r4, r0, r2
 8000e26:	eba1 010e 	sub.w	r1, r1, lr
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	46c8      	mov	r8, r9
 8000e2e:	46a6      	mov	lr, r4
 8000e30:	d356      	bcc.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e32:	d053      	beq.n	8000edc <__udivmoddi4+0x2a0>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x212>
 8000e36:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e42:	fa22 f306 	lsr.w	r3, r2, r6
 8000e46:	40f1      	lsrs	r1, r6
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa21 f303 	lsr.w	r3, r1, r3
 8000e64:	4091      	lsls	r1, r2
 8000e66:	4301      	orrs	r1, r0
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e74:	fb07 3610 	mls	r6, r7, r0, r3
 8000e78:	0c0b      	lsrs	r3, r1, #16
 8000e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e82:	429e      	cmp	r6, r3
 8000e84:	fa04 f402 	lsl.w	r4, r4, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x260>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e92:	d22f      	bcs.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e94:	429e      	cmp	r6, r3
 8000e96:	d92d      	bls.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1b9b      	subs	r3, r3, r6
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eac:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x28a>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ebc:	d216      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d914      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ecc:	e738      	b.n	8000d40 <__udivmoddi4+0x104>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e705      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e3      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6f8      	b.n	8000cce <__udivmoddi4+0x92>
 8000edc:	454b      	cmp	r3, r9
 8000ede:	d2a9      	bcs.n	8000e34 <__udivmoddi4+0x1f8>
 8000ee0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7a3      	b.n	8000e34 <__udivmoddi4+0x1f8>
 8000eec:	4646      	mov	r6, r8
 8000eee:	e7ea      	b.n	8000ec6 <__udivmoddi4+0x28a>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	e794      	b.n	8000e1e <__udivmoddi4+0x1e2>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e7d1      	b.n	8000e9c <__udivmoddi4+0x260>
 8000ef8:	46d0      	mov	r8, sl
 8000efa:	e77b      	b.n	8000df4 <__udivmoddi4+0x1b8>
 8000efc:	3b02      	subs	r3, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e732      	b.n	8000d68 <__udivmoddi4+0x12c>
 8000f02:	4630      	mov	r0, r6
 8000f04:	e709      	b.n	8000d1a <__udivmoddi4+0xde>
 8000f06:	4464      	add	r4, ip
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x156>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b08b      	sub	sp, #44	; 0x2c
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f000 fe80 	bl	8001c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f8c7 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f000 fb29 	bl	8001574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f22:	f000 fadb 	bl	80014dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f26:	f000 f9eb 	bl	8001300 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f2a:	f000 f90b 	bl	8001144 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2e:	f000 f981 	bl	8001234 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000f32:	f000 fa79 	bl	8001428 <MX_TIM2_Init>
  uint16_t adc2_val;
  double adc2_value;

  double pwm_val;

  TIM1->CCR1 = 500;
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <main+0x174>)
 8000f38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR1 = 500;
 8000f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // IN1 PIN (EN PIN)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	484f      	ldr	r0, [pc, #316]	; (8001088 <main+0x178>)
 8000f4c:	f003 faf4 	bl	8004538 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // IN2 PIN (PH PIN)
 8000f50:	2100      	movs	r1, #0
 8000f52:	484e      	ldr	r0, [pc, #312]	; (800108c <main+0x17c>)
 8000f54:	f003 faf0 	bl	8004538 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // PH PIN - GPIO
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f002 fab2 	bl	80034c8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1); // START POT ADC
 8000f64:	484a      	ldr	r0, [pc, #296]	; (8001090 <main+0x180>)
 8000f66:	f001 fa63 	bl	8002430 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2); // START IPROPI ADC
 8000f6a:	484a      	ldr	r0, [pc, #296]	; (8001094 <main+0x184>)
 8000f6c:	f001 fa60 	bl	8002430 <HAL_ADC_Start>
	  adc1_val = HAL_ADC_GetValue(&hadc1);
 8000f70:	4847      	ldr	r0, [pc, #284]	; (8001090 <main+0x180>)
 8000f72:	f001 fb19 	bl	80025a8 <HAL_ADC_GetValue>
 8000f76:	4603      	mov	r3, r0
 8000f78:	84fb      	strh	r3, [r7, #38]	; 0x26
	  adc1_value = adc1_val;
 8000f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fae9 	bl	8000554 <__aeabi_ui2d>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  adc2_val = HAL_ADC_GetValue(&hadc2);
 8000f8a:	4842      	ldr	r0, [pc, #264]	; (8001094 <main+0x184>)
 8000f8c:	f001 fb0c 	bl	80025a8 <HAL_ADC_GetValue>
 8000f90:	4603      	mov	r3, r0
 8000f92:	82fb      	strh	r3, [r7, #22]
	  adc2_value = adc2_val;
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fadc 	bl	8000554 <__aeabi_ui2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  adc2_value = adc2_value;//*(0.015891); // mA/bit

	  UART_PRINT_TEXT("\nADC DRV reading: ");
 8000fa4:	483c      	ldr	r0, [pc, #240]	; (8001098 <main+0x188>)
 8000fa6:	f000 fbd7 	bl	8001758 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(adc2_value);
 8000faa:	ed97 0b02 	vldr	d0, [r7, #8]
 8000fae:	f000 fb37 	bl	8001620 <UART_PRINT_VAL>
	  UART_PRINT_TEXT("\n");
 8000fb2:	483a      	ldr	r0, [pc, #232]	; (800109c <main+0x18c>)
 8000fb4:	f000 fbd0 	bl	8001758 <UART_PRINT_TEXT>
	  UART_PRINT_TEXT("\nADC POT reading: ");
 8000fb8:	4839      	ldr	r0, [pc, #228]	; (80010a0 <main+0x190>)
 8000fba:	f000 fbcd 	bl	8001758 <UART_PRINT_TEXT>
	  UART_PRINT_VAL(adc1_value);
 8000fbe:	ed97 0b06 	vldr	d0, [r7, #24]
 8000fc2:	f000 fb2d 	bl	8001620 <UART_PRINT_VAL>


	  if(adc1_value < 2048){ // reverse
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <main+0x194>)
 8000fcc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fd0:	f7ff fdac 	bl	8000b2c <__aeabi_dcmplt>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d029      	beq.n	800102e <main+0x11e>
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
		  pwm_val = 1000.0 * ((2048.0 - adc1_value) / 2048.0);
 8000fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4930      	ldr	r1, [pc, #192]	; (80010a4 <main+0x194>)
 8000fe4:	f7ff f978 	bl	80002d8 <__aeabi_dsub>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <main+0x194>)
 8000ff6:	f7ff fc51 	bl	800089c <__aeabi_ddiv>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <main+0x198>)
 8001008:	f7ff fb1e 	bl	8000648 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9c7 2300 	strd	r2, r3, [r7]
//		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_val); // IN2 = 1
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <main+0x17c>)
 8001016:	681c      	ldr	r4, [r3, #0]
 8001018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800101c:	f7ff fdd6 	bl	8000bcc <__aeabi_d2uiz>
 8001020:	4603      	mov	r3, r0
 8001022:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0); // IN1 = 0
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <main+0x178>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	635a      	str	r2, [r3, #52]	; 0x34
 800102c:	e79a      	b.n	8000f64 <main+0x54>
	  }
	  else{ // forward
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
		  pwm_val = 1000.0 * ((adc1_value - 2048.0) / 2048.0);
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <main+0x194>)
 8001034:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001038:	f7ff f94e 	bl	80002d8 <__aeabi_dsub>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <main+0x194>)
 800104a:	f7ff fc27 	bl	800089c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <main+0x198>)
 800105c:	f7ff faf4 	bl	8000648 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2300 	strd	r2, r3, [r7]
//		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val);
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_val); // IN1 = 1
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <main+0x178>)
 800106a:	681c      	ldr	r4, [r3, #0]
 800106c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001070:	f7ff fdac 	bl	8000bcc <__aeabi_d2uiz>
 8001074:	4603      	mov	r3, r0
 8001076:	6363      	str	r3, [r4, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0); // IN2 = 0
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <main+0x17c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_ADC_Start(&hadc1); // START POT ADC
 8001080:	e770      	b.n	8000f64 <main+0x54>
 8001082:	bf00      	nop
 8001084:	40012c00 	.word	0x40012c00
 8001088:	20000164 	.word	0x20000164
 800108c:	200001b0 	.word	0x200001b0
 8001090:	2000008c 	.word	0x2000008c
 8001094:	200000f8 	.word	0x200000f8
 8001098:	08006944 	.word	0x08006944
 800109c:	08006958 	.word	0x08006958
 80010a0:	0800695c 	.word	0x0800695c
 80010a4:	40a00000 	.word	0x40a00000
 80010a8:	408f4000 	.word	0x408f4000

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2238      	movs	r2, #56	; 0x38
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 ffb2 	bl	8006024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f002 fa12 	bl	80034f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010ea:	2304      	movs	r3, #4
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010ee:	2355      	movs	r3, #85	; 0x55
 80010f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fa9c 	bl	8003640 <HAL_RCC_OscConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800110e:	f000 fb37 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	230f      	movs	r3, #15
 8001114:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001116:	2303      	movs	r3, #3
 8001118:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2104      	movs	r1, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f002 fda0 	bl	8003c70 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001136:	f000 fb23 	bl	8001780 <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f004 ff61 	bl	8006024 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <MX_ADC1_Init+0xe8>)
 8001164:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001168:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <MX_ADC1_Init+0xe8>)
 800116c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001170:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <MX_ADC1_Init+0xe8>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <MX_ADC1_Init+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_ADC1_Init+0xe8>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <MX_ADC1_Init+0xe8>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <MX_ADC1_Init+0xe8>)
 800118c:	2204      	movs	r2, #4
 800118e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <MX_ADC1_Init+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <MX_ADC1_Init+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <MX_ADC1_Init+0xe8>)
 800119e:	2201      	movs	r2, #1
 80011a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <MX_ADC1_Init+0xe8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <MX_ADC1_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC1_Init+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_ADC1_Init+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_ADC1_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_ADC1_Init+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011cc:	4817      	ldr	r0, [pc, #92]	; (800122c <MX_ADC1_Init+0xe8>)
 80011ce:	f000 ffa5 	bl	800211c <HAL_ADC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80011d8:	f000 fad2 	bl	8001780 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <MX_ADC1_Init+0xe8>)
 80011e8:	f001 fe64 	bl	8002eb4 <HAL_ADCEx_MultiModeConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011f2:	f000 fac5 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_ADC1_Init+0xec>)
 80011f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fa:	2306      	movs	r3, #6
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001202:	237f      	movs	r3, #127	; 0x7f
 8001204:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001206:	2304      	movs	r3, #4
 8001208:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_ADC1_Init+0xe8>)
 8001214:	f001 f9d6 	bl	80025c4 <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800121e:	f000 faaf 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000008c 	.word	0x2000008c
 8001230:	08600004 	.word	0x08600004

08001234 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2220      	movs	r2, #32
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f004 feef 	bl	8006024 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001248:	4a2b      	ldr	r2, [pc, #172]	; (80012f8 <MX_ADC2_Init+0xc4>)
 800124a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800124e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001252:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800126e:	2204      	movs	r2, #4
 8001270:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001274:	2200      	movs	r2, #0
 8001276:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800127a:	2200      	movs	r2, #0
 800127c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001280:	2201      	movs	r2, #1
 8001282:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800128e:	2200      	movs	r2, #0
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012b0:	f000 ff34 	bl	800211c <HAL_ADC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80012ba:	f000 fa61 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_ADC2_Init+0xc8>)
 80012c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c2:	2306      	movs	r3, #6
 80012c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ca:	237f      	movs	r3, #127	; 0x7f
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ce:	2304      	movs	r3, #4
 80012d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012dc:	f001 f972 	bl	80025c4 <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80012e6:	f000 fa4b 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000f8 	.word	0x200000f8
 80012f8:	50000100 	.word	0x50000100
 80012fc:	0c900008 	.word	0x0c900008

08001300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b098      	sub	sp, #96	; 0x60
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2234      	movs	r2, #52	; 0x34
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fe79 	bl	8006024 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <MX_TIM1_Init+0x120>)
 8001334:	4a3b      	ldr	r2, [pc, #236]	; (8001424 <MX_TIM1_Init+0x124>)
 8001336:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001338:	4b39      	ldr	r3, [pc, #228]	; (8001420 <MX_TIM1_Init+0x120>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <MX_TIM1_Init+0x120>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <MX_TIM1_Init+0x120>)
 8001346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <MX_TIM1_Init+0x120>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001352:	4b33      	ldr	r3, [pc, #204]	; (8001420 <MX_TIM1_Init+0x120>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <MX_TIM1_Init+0x120>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800135e:	4830      	ldr	r0, [pc, #192]	; (8001420 <MX_TIM1_Init+0x120>)
 8001360:	f003 f892 	bl	8004488 <HAL_TIM_PWM_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800136a:	f000 fa09 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800137a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800137e:	4619      	mov	r1, r3
 8001380:	4827      	ldr	r0, [pc, #156]	; (8001420 <MX_TIM1_Init+0x120>)
 8001382:	f003 fe99 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800138c:	f000 f9f8 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001390:	2360      	movs	r3, #96	; 0x60
 8001392:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001398:	2300      	movs	r3, #0
 800139a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139c:	2300      	movs	r3, #0
 800139e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	481a      	ldr	r0, [pc, #104]	; (8001420 <MX_TIM1_Init+0x120>)
 80013b6:	f003 f9bf 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013c0:	f000 f9de 	bl	8001780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <MX_TIM1_Init+0x120>)
 8001402:	f003 fedb 	bl	80051bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800140c:	f000 f9b8 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <MX_TIM1_Init+0x120>)
 8001412:	f000 fab5 	bl	8001980 <HAL_TIM_MspPostInit>

}
 8001416:	bf00      	nop
 8001418:	3760      	adds	r7, #96	; 0x60
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000164 	.word	0x20000164
 8001424:	40012c00 	.word	0x40012c00

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_TIM2_Init+0xb0>)
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_TIM2_Init+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM2_Init+0xb0>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001476:	f003 f807 	bl	8004488 <HAL_TIM_PWM_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 f97e 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001494:	f003 fe10 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800149e:	f000 f96f 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM2_Init+0xb0>)
 80014ba:	f003 f93d 	bl	8004738 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014c4:	f000 f95c 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM2_Init+0xb0>)
 80014ca:	f000 fa59 	bl	8001980 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001b0 	.word	0x200001b0

080014dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_USART2_UART_Init+0x90>)
 80014e2:	4a23      	ldr	r2, [pc, #140]	; (8001570 <MX_USART2_UART_Init+0x94>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <MX_USART2_UART_Init+0x90>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <MX_USART2_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_USART2_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_USART2_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_USART2_UART_Init+0x90>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_USART2_UART_Init+0x90>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_USART2_UART_Init+0x90>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_USART2_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_USART2_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_USART2_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <MX_USART2_UART_Init+0x90>)
 8001526:	f003 fee9 	bl	80052fc <HAL_UART_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001530:	f000 f926 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_USART2_UART_Init+0x90>)
 8001538:	f004 fc80 	bl	8005e3c <HAL_UARTEx_SetTxFifoThreshold>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001542:	f000 f91d 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001546:	2100      	movs	r1, #0
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <MX_USART2_UART_Init+0x90>)
 800154a:	f004 fcb5 	bl	8005eb8 <HAL_UARTEx_SetRxFifoThreshold>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 f914 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_USART2_UART_Init+0x90>)
 800155a:	f004 fc36 	bl	8005dca <HAL_UARTEx_DisableFifoMode>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001564:	f000 f90c 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001fc 	.word	0x200001fc
 8001570:	40004400 	.word	0x40004400

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <MX_GPIO_Init+0xa4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <MX_GPIO_Init+0xa4>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_GPIO_Init+0xa4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_GPIO_Init+0xa4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <MX_GPIO_Init+0xa4>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_GPIO_Init+0xa4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2101      	movs	r1, #1
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f001 ff81 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_GPIO_Init+0xa8>)
 80015ce:	f001 ff7b 	bl	80034c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015d2:	2301      	movs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f001 fdea 	bl	80031c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4619      	mov	r1, r3
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0xa8>)
 800160a:	f001 fddb 	bl	80031c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	48000400 	.word	0x48000400

08001620 <UART_PRINT_VAL>:

/* USER CODE BEGIN 4 */
void UART_PRINT_VAL(double value){
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	; 0x58
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0b00 	vstr	d0, [r7]
    char total[50];
    char temp[10];
    if(value < 0){
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001636:	f7ff fa79 	bl	8000b2c <__aeabi_dcmplt>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <UART_PRINT_VAL+0x26>
       UART_PRINT_TEXT("-");
 8001640:	4840      	ldr	r0, [pc, #256]	; (8001744 <UART_PRINT_VAL+0x124>)
 8001642:	f000 f889 	bl	8001758 <UART_PRINT_TEXT>
    }
    sprintf(total, "%i", abs((int)value));
 8001646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164a:	f7ff fa97 	bl	8000b7c <__aeabi_d2iz>
 800164e:	4603      	mov	r3, r0
 8001650:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001654:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	493a      	ldr	r1, [pc, #232]	; (8001748 <UART_PRINT_VAL+0x128>)
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fce8 	bl	8006034 <siprintf>
    strcat(total, ".");
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fdd9 	bl	8000220 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	4413      	add	r3, r2
 8001678:	4934      	ldr	r1, [pc, #208]	; (800174c <UART_PRINT_VAL+0x12c>)
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	8013      	strh	r3, [r2, #0]
    double currentVal = (value - (int) value);
 8001682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001686:	f7ff fa79 	bl	8000b7c <__aeabi_d2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff71 	bl	8000574 <__aeabi_i2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169a:	f7fe fe1d 	bl	80002d8 <__aeabi_dsub>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 80016a6:	2300      	movs	r3, #0
 80016a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016aa:	e036      	b.n	800171a <UART_PRINT_VAL+0xfa>
        currentVal *= 10;
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <UART_PRINT_VAL+0x130>)
 80016b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        sprintf(temp, "%i", abs((int)currentVal));
 80016c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016c6:	f7ff fa59 	bl	8000b7c <__aeabi_d2iz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80016d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	491b      	ldr	r1, [pc, #108]	; (8001748 <UART_PRINT_VAL+0x128>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fcaa 	bl	8006034 <siprintf>
        strcat(total, temp);
 80016e0:	f107 020c 	add.w	r2, r7, #12
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 fcc2 	bl	8006074 <strcat>
        currentVal -= (int)currentVal;
 80016f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016f4:	f7ff fa42 	bl	8000b7c <__aeabi_d2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff3a 	bl	8000574 <__aeabi_i2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001708:	f7fe fde6 	bl	80002d8 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    for(int a=0;a<6;a++){
 8001714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001716:	3301      	adds	r3, #1
 8001718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800171a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171c:	2b05      	cmp	r3, #5
 800171e:	ddc5      	ble.n	80016ac <UART_PRINT_VAL+0x8c>
    }
    HAL_UART_Transmit(&huart2, total, strlen(total), 100);
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fd7b 	bl	8000220 <strlen>
 800172a:	4603      	mov	r3, r0
 800172c:	b29a      	uxth	r2, r3
 800172e:	f107 0118 	add.w	r1, r7, #24
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <UART_PRINT_VAL+0x134>)
 8001736:	f003 fe31 	bl	800539c <HAL_UART_Transmit>
}
 800173a:	bf00      	nop
 800173c:	3758      	adds	r7, #88	; 0x58
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08006970 	.word	0x08006970
 8001748:	08006974 	.word	0x08006974
 800174c:	08006978 	.word	0x08006978
 8001750:	40240000 	.word	0x40240000
 8001754:	200001fc 	.word	0x200001fc

08001758 <UART_PRINT_TEXT>:
void UART_PRINT_TEXT(uint8_t* MSG){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, MSG, strlen(MSG), 100);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7fe fd5d 	bl	8000220 <strlen>
 8001766:	4603      	mov	r3, r0
 8001768:	b29a      	uxth	r2, r3
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <UART_PRINT_TEXT+0x24>)
 8001770:	f003 fe14 	bl	800539c <HAL_UART_Transmit>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200001fc 	.word	0x200001fc

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_MspInit+0x44>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_MspInit+0x44>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6613      	str	r3, [r2, #96]	; 0x60
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x44>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x44>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09c      	sub	sp, #112	; 0x70
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	2244      	movs	r2, #68	; 0x44
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fc15 	bl	8006024 <memset>
  if(hadc->Instance==ADC1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001802:	d13e      	bne.n	8001882 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001808:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800180a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800180e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fc47 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001820:	f7ff ffae 	bl	8001780 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <HAL_ADC_MspInit+0x13c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a39      	ldr	r2, [pc, #228]	; (8001910 <HAL_ADC_MspInit+0x13c>)
 800182c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800182e:	4b38      	ldr	r3, [pc, #224]	; (8001910 <HAL_ADC_MspInit+0x13c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10b      	bne.n	800184e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001836:	4b37      	ldr	r3, [pc, #220]	; (8001914 <HAL_ADC_MspInit+0x140>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a36      	ldr	r2, [pc, #216]	; (8001914 <HAL_ADC_MspInit+0x140>)
 800183c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_ADC_MspInit+0x140>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_ADC_MspInit+0x140>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a30      	ldr	r2, [pc, #192]	; (8001914 <HAL_ADC_MspInit+0x140>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_ADC_MspInit+0x140>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001866:	2302      	movs	r3, #2
 8001868:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f001 fca2 	bl	80031c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001880:	e042      	b.n	8001908 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_ADC_MspInit+0x144>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d13d      	bne.n	8001908 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800188c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001890:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001892:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001896:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fc03 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80018a8:	f7ff ff6a 	bl	8001780 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_ADC_MspInit+0x13c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_ADC_MspInit+0x13c>)
 80018b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_ADC_MspInit+0x13c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10b      	bne.n	80018d6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_ADC_MspInit+0x140>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_ADC_MspInit+0x140>)
 80018c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_ADC_MspInit+0x140>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_ADC_MspInit+0x140>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_ADC_MspInit+0x140>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_ADC_MspInit+0x140>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ee:	2340      	movs	r3, #64	; 0x40
 80018f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f2:	2303      	movs	r3, #3
 80018f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f001 fc5e 	bl	80031c4 <HAL_GPIO_Init>
}
 8001908:	bf00      	nop
 800190a:	3770      	adds	r7, #112	; 0x70
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000028c 	.word	0x2000028c
 8001914:	40021000 	.word	0x40021000
 8001918:	50000100 	.word	0x50000100

0800191c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_TIM_PWM_MspInit+0x5c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10c      	bne.n	8001948 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001938:	6613      	str	r3, [r2, #96]	; 0x60
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001946:	e010      	b.n	800196a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d10b      	bne.n	800196a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6593      	str	r3, [r2, #88]	; 0x58
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <HAL_TIM_MspPostInit+0xac>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11e      	bne.n	80019e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_TIM_MspPostInit+0xb0>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <HAL_TIM_MspPostInit+0xb0>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_TIM_MspPostInit+0xb0>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019cc:	2306      	movs	r3, #6
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f001 fbf3 	bl	80031c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019de:	e021      	b.n	8001a24 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d11c      	bne.n	8001a24 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_TIM_MspPostInit+0xb0>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_TIM_MspPostInit+0xb0>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_TIM_MspPostInit+0xb0>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a02:	2320      	movs	r3, #32
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a12:	2301      	movs	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f001 fbd0 	bl	80031c4 <HAL_GPIO_Init>
}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40021000 	.word	0x40021000

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b09a      	sub	sp, #104	; 0x68
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	2244      	movs	r2, #68	; 0x44
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 fae5 	bl	8006024 <memset>
  if(huart->Instance==USART2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_UART_MspInit+0xa8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d136      	bne.n	8001ad2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fb19 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a7c:	f7ff fe80 	bl	8001780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_UART_MspInit+0xac>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_UART_MspInit+0xac>)
 8001a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_UART_MspInit+0xac>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_UART_MspInit+0xac>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_UART_MspInit+0xac>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_UART_MspInit+0xac>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001ab0:	230c      	movs	r3, #12
 8001ab2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f001 fb79 	bl	80031c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3768      	adds	r7, #104	; 0x68
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40004400 	.word	0x40004400
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f8c6 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f004 fa32 	bl	8005fd0 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20008000 	.word	0x20008000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	20000290 	.word	0x20000290
 8001ba0:	200002a8 	.word	0x200002a8

08001ba4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <LoopForever+0xe>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be4:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <LoopForever+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf2:	f7ff ffd7 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f004 f9f1 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfa:	f7ff f989 	bl	8000f10 <main>

08001bfe <LoopForever>:

LoopForever:
    b LoopForever
 8001bfe:	e7fe      	b.n	8001bfe <LoopForever>
  ldr   r0, =_estack
 8001c00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c0c:	08006a00 	.word	0x08006a00
  ldr r2, =_sbss
 8001c10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c14:	200002a8 	.word	0x200002a8

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>

08001c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f001 fa9b 	bl	8003160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f000 f80e 	bl	8001c4c <HAL_InitTick>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]
 8001c3a:	e001      	b.n	8001c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c3c:	f7ff fda6 	bl	800178c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c40:	79fb      	ldrb	r3, [r7, #7]

}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_InitTick+0x68>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d022      	beq.n	8001ca6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_InitTick+0x6c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_InitTick+0x68>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fa98 	bl	80031aa <HAL_SYSTICK_Config>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10f      	bne.n	8001ca0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	d809      	bhi.n	8001c9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c86:	2200      	movs	r2, #0
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8e:	f001 fa72 	bl	8003176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_InitTick+0x70>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e007      	b.n	8001caa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e004      	b.n	8001caa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e001      	b.n	8001caa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_IncTick+0x1c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_IncTick+0x1c>)
 8001cd0:	6013      	str	r3, [r2, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	20000294 	.word	0x20000294
 8001ce0:	20000008 	.word	0x20000008

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000294 	.word	0x20000294

08001cfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	609a      	str	r2, [r3, #8]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3360      	adds	r3, #96	; 0x60
 8001d76:	461a      	mov	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <LL_ADC_SetOffset+0x44>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	4313      	orrs	r3, r2
 8001d94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	03fff000 	.word	0x03fff000

08001dac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3360      	adds	r3, #96	; 0x60
 8001dba:	461a      	mov	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3360      	adds	r3, #96	; 0x60
 8001de8:	461a      	mov	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b087      	sub	sp, #28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3360      	adds	r3, #96	; 0x60
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3360      	adds	r3, #96	; 0x60
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	615a      	str	r2, [r3, #20]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3330      	adds	r3, #48	; 0x30
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	4413      	add	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	211f      	movs	r1, #31
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	0e9b      	lsrs	r3, r3, #26
 8001ed8:	f003 011f 	and.w	r1, r3, #31
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3314      	adds	r3, #20
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	0e5b      	lsrs	r3, r3, #25
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	0d1b      	lsrs	r3, r3, #20
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2107      	movs	r1, #7
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0d1b      	lsrs	r3, r3, #20
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10a      	bne.n	8001f7a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f70:	431a      	orrs	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001f78:	e00a      	b.n	8001f90 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	43db      	mvns	r3, r3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	407f0000 	.word	0x407f0000

08001fa0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 031f 	and.w	r3, r3, #31
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6093      	str	r3, [r2, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800201c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002044:	d101      	bne.n	800204a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <LL_ADC_IsEnabled+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_IsEnabled+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ba:	f043 0204 	orr.w	r2, r3, #4
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d101      	bne.n	80020e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b08      	cmp	r3, #8
 8002106:	d101      	bne.n	800210c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e177      	b.n	8002426 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fb45 	bl	80017d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff3f 	bl	8001fe0 <LL_ADC_IsDeepPowerDownEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff25 	bl	8001fbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff5a 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff3e 	bl	8002008 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800218c:	4b9c      	ldr	r3, [pc, #624]	; (8002400 <HAL_ADC_Init+0x2e4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	4a9c      	ldr	r2, [pc, #624]	; (8002404 <HAL_ADC_Init+0x2e8>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff3c 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff75 	bl	80020ce <LL_ADC_REG_IsConversionOngoing>
 80021e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 8110 	bne.w	8002414 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 810c 	bne.w	8002414 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002204:	f043 0202 	orr.w	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff35 	bl	8002080 <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800221c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002220:	f7ff ff2e 	bl	8002080 <LL_ADC_IsEnabled>
 8002224:	4604      	mov	r4, r0
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <HAL_ADC_Init+0x2ec>)
 8002228:	f7ff ff2a 	bl	8002080 <LL_ADC_IsEnabled>
 800222c:	4603      	mov	r3, r0
 800222e:	4323      	orrs	r3, r4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4619      	mov	r1, r3
 800223a:	4874      	ldr	r0, [pc, #464]	; (800240c <HAL_ADC_Init+0x2f0>)
 800223c:	f7ff fd5e 	bl	8001cfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7f5b      	ldrb	r3, [r3, #29]
 8002244:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800224a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002250:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002256:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800225e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800226a:	2b01      	cmp	r3, #1
 800226c:	d106      	bne.n	800227c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	3b01      	subs	r3, #1
 8002274:	045b      	lsls	r3, r3, #17
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_ADC_Init+0x2f4>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	69b9      	ldr	r1, [r7, #24]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff01 	bl	80020ce <LL_ADC_REG_IsConversionOngoing>
 80022cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff0e 	bl	80020f4 <LL_ADC_INJ_IsConversionOngoing>
 80022d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d16d      	bne.n	80023bc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d16a      	bne.n	80023bc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002302:	f023 0302 	bic.w	r3, r3, #2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	430b      	orrs	r3, r1
 800230e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d017      	beq.n	8002348 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002326:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002330:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6911      	ldr	r1, [r2, #16]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	430b      	orrs	r3, r1
 8002342:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002346:	e013      	b.n	8002370 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002356:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800236c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002376:	2b01      	cmp	r3, #1
 8002378:	d118      	bne.n	80023ac <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002390:	4311      	orrs	r1, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800239c:	430a      	orrs	r2, r1
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	e007      	b.n	80023bc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10c      	bne.n	80023de <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f023 010f 	bic.w	r1, r3, #15
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	1e5a      	subs	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
 80023dc:	e007      	b.n	80023ee <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 020f 	bic.w	r2, r2, #15
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80023fe:	e011      	b.n	8002424 <HAL_ADC_Init+0x308>
 8002400:	20000000 	.word	0x20000000
 8002404:	053e2d63 	.word	0x053e2d63
 8002408:	50000100 	.word	0x50000100
 800240c:	50000300 	.word	0x50000300
 8002410:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	f043 0210 	orr.w	r2, r3, #16
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002424:	7ffb      	ldrb	r3, [r7, #31]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}
 800242e:	bf00      	nop

08002430 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002438:	4859      	ldr	r0, [pc, #356]	; (80025a0 <HAL_ADC_Start+0x170>)
 800243a:	f7ff fdb1 	bl	8001fa0 <LL_ADC_GetMultimode>
 800243e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fe42 	bl	80020ce <LL_ADC_REG_IsConversionOngoing>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 809f 	bne.w	8002590 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_ADC_Start+0x30>
 800245c:	2302      	movs	r3, #2
 800245e:	e09a      	b.n	8002596 <HAL_ADC_Start+0x166>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fc9b 	bl	8002da4 <ADC_Enable>
 800246e:	4603      	mov	r3, r0
 8002470:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f040 8086 	bne.w	8002586 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a44      	ldr	r2, [pc, #272]	; (80025a4 <HAL_ADC_Start+0x174>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d002      	beq.n	800249e <HAL_ADC_Start+0x6e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e001      	b.n	80024a2 <HAL_ADC_Start+0x72>
 800249e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d002      	beq.n	80024b0 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d106      	bne.n	80024d8 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	f023 0206 	bic.w	r2, r3, #6
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	661a      	str	r2, [r3, #96]	; 0x60
 80024d6:	e002      	b.n	80024de <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	221c      	movs	r2, #28
 80024e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <HAL_ADC_Start+0x174>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d002      	beq.n	80024fe <HAL_ADC_Start+0xce>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	e001      	b.n	8002502 <HAL_ADC_Start+0xd2>
 80024fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	4293      	cmp	r3, r2
 8002508:	d008      	beq.n	800251c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d002      	beq.n	800251c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b09      	cmp	r3, #9
 800251a:	d114      	bne.n	8002546 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002532:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fdb1 	bl	80020a6 <LL_ADC_REG_StartConversion>
 8002544:	e026      	b.n	8002594 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <HAL_ADC_Start+0x174>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d002      	beq.n	8002562 <HAL_ADC_Start+0x132>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	e001      	b.n	8002566 <HAL_ADC_Start+0x136>
 8002562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002566:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00f      	beq.n	8002594 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800257c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	65da      	str	r2, [r3, #92]	; 0x5c
 8002584:	e006      	b.n	8002594 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800258e:	e001      	b.n	8002594 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	50000300 	.word	0x50000300
 80025a4:	50000100 	.word	0x50000100

080025a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0b6      	sub	sp, #216	; 0xd8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x22>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e3c8      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x7b4>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fd6b 	bl	80020ce <LL_ADC_REG_IsConversionOngoing>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 83ad 	bne.w	8002d5a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f7ff fc47 	bl	8001ea0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fd59 	bl	80020ce <LL_ADC_REG_IsConversionOngoing>
 800261c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fd65 	bl	80020f4 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 81d9 	bne.w	80029ea <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002638:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 81d4 	bne.w	80029ea <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800264a:	d10f      	bne.n	800266c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2200      	movs	r2, #0
 8002656:	4619      	mov	r1, r3
 8002658:	f7ff fc4e 	bl	8001ef8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fc08 	bl	8001e7a <LL_ADC_SetSamplingTimeCommonConfig>
 800266a:	e00e      	b.n	800268a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff fc3d 	bl	8001ef8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbf8 	bl	8001e7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d022      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026bc:	f7ff fb52 	bl	8001d64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f7ff fb9e 	bl	8001e0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	7f1b      	ldrb	r3, [r3, #28]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x124>
 80026e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e6:	e000      	b.n	80026ea <HAL_ADC_ConfigChannel+0x126>
 80026e8:	2300      	movs	r3, #0
 80026ea:	461a      	mov	r2, r3
 80026ec:	f7ff fbaa 	bl	8001e44 <LL_ADC_SetOffsetSaturation>
 80026f0:	e17b      	b.n	80029ea <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fb57 	bl	8001dac <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_ADC_ConfigChannel+0x15a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fb4c 	bl	8001dac <LL_ADC_GetOffsetChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	e01e      	b.n	800275c <HAL_ADC_ConfigChannel+0x198>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fb41 	bl	8001dac <LL_ADC_GetOffsetChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800273c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e004      	b.n	800275a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1b0>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	e018      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1e2>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800278c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002798:	2320      	movs	r3, #32
 800279a:	e004      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800279c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fb10 	bl	8001dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff faf4 	bl	8001dac <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x220>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fae9 	bl	8001dac <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	e01e      	b.n	8002822 <HAL_ADC_ConfigChannel+0x25e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fade 	bl	8001dac <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800280a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002816:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_ADC_ConfigChannel+0x276>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	e018      	b.n	800286c <HAL_ADC_ConfigChannel+0x2a8>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800284e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002856:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e004      	b.n	800286c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff faad 	bl	8001dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fa91 	bl	8001dac <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x2e6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2102      	movs	r1, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fa86 	bl	8001dac <LL_ADC_GetOffsetChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	e01e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x324>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fa7b 	bl	8001dac <LL_ADC_GetOffsetChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e004      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80028dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x33c>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	e016      	b.n	800292e <HAL_ADC_ConfigChannel+0x36a>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002920:	2320      	movs	r3, #32
 8002922:	e004      	b.n	800292e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800292e:	429a      	cmp	r2, r3
 8002930:	d106      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	2102      	movs	r1, #2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fa4c 	bl	8001dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2103      	movs	r1, #3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fa30 	bl	8001dac <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_ADC_ConfigChannel+0x3a8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2103      	movs	r1, #3
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fa25 	bl	8001dac <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	0e9b      	lsrs	r3, r3, #26
 8002966:	f003 021f 	and.w	r2, r3, #31
 800296a:	e017      	b.n	800299c <HAL_ADC_ConfigChannel+0x3d8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2103      	movs	r1, #3
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fa1a 	bl	8001dac <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002986:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x3f0>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	e011      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x414>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e003      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80029d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029d8:	429a      	cmp	r2, r3
 80029da:	d106      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2103      	movs	r1, #3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f9f7 	bl	8001dd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fb46 	bl	8002080 <LL_ADC_IsEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 8140 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f7ff faa1 	bl	8001f50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4a8f      	ldr	r2, [pc, #572]	; (8002c50 <HAL_ADC_ConfigChannel+0x68c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	f040 8131 	bne.w	8002c7c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10b      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x47e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2b09      	cmp	r3, #9
 8002a38:	bf94      	ite	ls
 8002a3a:	2301      	movls	r3, #1
 8002a3c:	2300      	movhi	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e019      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4b2>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a52:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e003      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2b09      	cmp	r3, #9
 8002a6e:	bf94      	ite	ls
 8002a70:	2301      	movls	r3, #1
 8002a72:	2300      	movhi	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d079      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x4d2>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0e9b      	lsrs	r3, r3, #26
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	069b      	lsls	r3, r3, #26
 8002a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a94:	e015      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x4fe>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	e003      	b.n	8002aba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x51e>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	e017      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x54e>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e003      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	ea42 0103 	orr.w	r1, r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x574>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f003 021f 	and.w	r2, r3, #31
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	051b      	lsls	r3, r3, #20
 8002b36:	e018      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5a6>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e003      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f003 021f 	and.w	r2, r3, #31
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	e081      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x5c6>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	3301      	adds	r3, #1
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b88:	e015      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x5f2>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	069b      	lsls	r3, r3, #26
 8002bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x612>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	0e9b      	lsrs	r3, r3, #26
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	e017      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x642>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	61fb      	str	r3, [r7, #28]
  return result;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	ea42 0103 	orr.w	r1, r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x66e>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0e9b      	lsrs	r3, r3, #26
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	3b1e      	subs	r3, #30
 8002c2a:	051b      	lsls	r3, r3, #20
 8002c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c30:	e01e      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x6ac>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	613b      	str	r3, [r7, #16]
  return result;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e006      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x698>
 8002c4e:	bf00      	nop
 8002c50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f003 021f 	and.w	r2, r3, #31
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	3b1e      	subs	r3, #30
 8002c6a:	051b      	lsls	r3, r3, #20
 8002c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c70:	430b      	orrs	r3, r1
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	6892      	ldr	r2, [r2, #8]
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7ff f93e 	bl	8001ef8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b3f      	ldr	r3, [pc, #252]	; (8002d80 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d071      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c88:	483e      	ldr	r0, [pc, #248]	; (8002d84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c8a:	f7ff f85d 	bl	8001d48 <LL_ADC_GetCommonPathInternalCh>
 8002c8e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a3c      	ldr	r2, [pc, #240]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_ADC_ConfigChannel+0x6e2>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a3a      	ldr	r2, [pc, #232]	; (8002d8c <HAL_ADC_ConfigChannel+0x7c8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d127      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d121      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cba:	d157      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	482f      	ldr	r0, [pc, #188]	; (8002d84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cc8:	f7ff f82b 	bl	8001d22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ccc:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	4a30      	ldr	r2, [pc, #192]	; (8002d94 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ce6:	e002      	b.n	8002cee <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f9      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf4:	e03a      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d113      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x764>
 8002d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <HAL_ADC_ConfigChannel+0x7d8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02a      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4818      	ldr	r0, [pc, #96]	; (8002d84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d22:	f7fe fffe 	bl	8001d22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d26:	e021      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d11c      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <HAL_ADC_ConfigChannel+0x7d8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d011      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d50:	4619      	mov	r1, r3
 8002d52:	480c      	ldr	r0, [pc, #48]	; (8002d84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d54:	f7fe ffe5 	bl	8001d22 <LL_ADC_SetCommonPathInternalCh>
 8002d58:	e008      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d74:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	37d8      	adds	r7, #216	; 0xd8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	80080000 	.word	0x80080000
 8002d84:	50000300 	.word	0x50000300
 8002d88:	c3210000 	.word	0xc3210000
 8002d8c:	90c00010 	.word	0x90c00010
 8002d90:	20000000 	.word	0x20000000
 8002d94:	053e2d63 	.word	0x053e2d63
 8002d98:	c7520000 	.word	0xc7520000
 8002d9c:	50000100 	.word	0x50000100
 8002da0:	cb840000 	.word	0xcb840000

08002da4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f965 	bl	8002080 <LL_ADC_IsEnabled>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d14d      	bne.n	8002e58 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <ADC_Enable+0xc0>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	f043 0210 	orr.w	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e039      	b.n	8002e5a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f934 	bl	8002058 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002df0:	f7fe ff78 	bl	8001ce4 <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df6:	e028      	b.n	8002e4a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f93f 	bl	8002080 <LL_ADC_IsEnabled>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f923 	bl	8002058 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e12:	f7fe ff67 	bl	8001ce4 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d914      	bls.n	8002e4a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d00d      	beq.n	8002e4a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e007      	b.n	8002e5a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d1cf      	bne.n	8002df8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	8000003f 	.word	0x8000003f

08002e68 <LL_ADC_IsEnabled>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <LL_ADC_IsEnabled+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_ADC_IsEnabled+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d101      	bne.n	8002ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b0a1      	sub	sp, #132	; 0x84
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e08b      	b.n	8002fea <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002eda:	2300      	movs	r3, #0
 8002edc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eea:	d102      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	e001      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e06a      	b.n	8002fea <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ffb9 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffb3 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d14c      	bne.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d149      	bne.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f36:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d028      	beq.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f52:	035b      	lsls	r3, r3, #13
 8002f54:	430b      	orrs	r3, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f60:	f7ff ff82 	bl	8002e68 <LL_ADC_IsEnabled>
 8002f64:	4604      	mov	r4, r0
 8002f66:	4823      	ldr	r0, [pc, #140]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f68:	f7ff ff7e 	bl	8002e68 <LL_ADC_IsEnabled>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4323      	orrs	r3, r4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d133      	bne.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f7c:	f023 030f 	bic.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	6811      	ldr	r1, [r2, #0]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f90:	e024      	b.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fa2:	f7ff ff61 	bl	8002e68 <LL_ADC_IsEnabled>
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	4812      	ldr	r0, [pc, #72]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002faa:	f7ff ff5d 	bl	8002e68 <LL_ADC_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4323      	orrs	r3, r4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d112      	bne.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fbe:	f023 030f 	bic.w	r3, r3, #15
 8002fc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fc4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc6:	e009      	b.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002fda:	e000      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fe6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3784      	adds	r7, #132	; 0x84
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd90      	pop	{r4, r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	50000100 	.word	0x50000100
 8002ff8:	50000300 	.word	0x50000300

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003070:	2b00      	cmp	r3, #0
 8003072:	db0a      	blt.n	800308a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	b2da      	uxtb	r2, r3
 8003078:	490c      	ldr	r1, [pc, #48]	; (80030ac <__NVIC_SetPriority+0x4c>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	440b      	add	r3, r1
 8003084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003088:	e00a      	b.n	80030a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	4908      	ldr	r1, [pc, #32]	; (80030b0 <__NVIC_SetPriority+0x50>)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3b04      	subs	r3, #4
 8003098:	0112      	lsls	r2, r2, #4
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	440b      	add	r3, r1
 800309e:	761a      	strb	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000e100 	.word	0xe000e100
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f1c3 0307 	rsb	r3, r3, #7
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	bf28      	it	cs
 80030d2:	2304      	movcs	r3, #4
 80030d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3304      	adds	r3, #4
 80030da:	2b06      	cmp	r3, #6
 80030dc:	d902      	bls.n	80030e4 <NVIC_EncodePriority+0x30>
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3b03      	subs	r3, #3
 80030e2:	e000      	b.n	80030e6 <NVIC_EncodePriority+0x32>
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	401a      	ands	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	43d9      	mvns	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	4313      	orrs	r3, r2
         );
}
 800310e:	4618      	mov	r0, r3
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800312c:	d301      	bcc.n	8003132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312e:	2301      	movs	r3, #1
 8003130:	e00f      	b.n	8003152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <SysTick_Config+0x40>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313a:	210f      	movs	r1, #15
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	f7ff ff8e 	bl	8003060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <SysTick_Config+0x40>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <SysTick_Config+0x40>)
 800314c:	2207      	movs	r2, #7
 800314e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000e010 	.word	0xe000e010

08003160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff ff47 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003184:	f7ff ff5e 	bl	8003044 <__NVIC_GetPriorityGrouping>
 8003188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f7ff ff90 	bl	80030b4 <NVIC_EncodePriority>
 8003194:	4602      	mov	r2, r0
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff5f 	bl	8003060 <__NVIC_SetPriority>
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff ffb2 	bl	800311c <SysTick_Config>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031d2:	e15a      	b.n	800348a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	2101      	movs	r1, #1
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	4013      	ands	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 814c 	beq.w	8003484 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d005      	beq.n	8003204 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003200:	2b02      	cmp	r3, #2
 8003202:	d130      	bne.n	8003266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	2203      	movs	r2, #3
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800323a:	2201      	movs	r2, #1
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 0201 	and.w	r2, r3, #1
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b03      	cmp	r3, #3
 8003270:	d017      	beq.n	80032a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d123      	bne.n	80032f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	08da      	lsrs	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3208      	adds	r2, #8
 80032b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	08da      	lsrs	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3208      	adds	r2, #8
 80032f0:	6939      	ldr	r1, [r7, #16]
 80032f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a6 	beq.w	8003484 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003338:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <HAL_GPIO_Init+0x2e4>)
 800333a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333c:	4a5a      	ldr	r2, [pc, #360]	; (80034a8 <HAL_GPIO_Init+0x2e4>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6613      	str	r3, [r2, #96]	; 0x60
 8003344:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_GPIO_Init+0x2e4>)
 8003346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003350:	4a56      	ldr	r2, [pc, #344]	; (80034ac <HAL_GPIO_Init+0x2e8>)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800337a:	d01f      	beq.n	80033bc <HAL_GPIO_Init+0x1f8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a4c      	ldr	r2, [pc, #304]	; (80034b0 <HAL_GPIO_Init+0x2ec>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d019      	beq.n	80033b8 <HAL_GPIO_Init+0x1f4>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a4b      	ldr	r2, [pc, #300]	; (80034b4 <HAL_GPIO_Init+0x2f0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <HAL_GPIO_Init+0x1f0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a4a      	ldr	r2, [pc, #296]	; (80034b8 <HAL_GPIO_Init+0x2f4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00d      	beq.n	80033b0 <HAL_GPIO_Init+0x1ec>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a49      	ldr	r2, [pc, #292]	; (80034bc <HAL_GPIO_Init+0x2f8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d007      	beq.n	80033ac <HAL_GPIO_Init+0x1e8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a48      	ldr	r2, [pc, #288]	; (80034c0 <HAL_GPIO_Init+0x2fc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_GPIO_Init+0x1e4>
 80033a4:	2305      	movs	r3, #5
 80033a6:	e00a      	b.n	80033be <HAL_GPIO_Init+0x1fa>
 80033a8:	2306      	movs	r3, #6
 80033aa:	e008      	b.n	80033be <HAL_GPIO_Init+0x1fa>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e006      	b.n	80033be <HAL_GPIO_Init+0x1fa>
 80033b0:	2303      	movs	r3, #3
 80033b2:	e004      	b.n	80033be <HAL_GPIO_Init+0x1fa>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e002      	b.n	80033be <HAL_GPIO_Init+0x1fa>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_GPIO_Init+0x1fa>
 80033bc:	2300      	movs	r3, #0
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	f002 0203 	and.w	r2, r2, #3
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	4093      	lsls	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <HAL_GPIO_Init+0x2e8>)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	3302      	adds	r3, #2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033dc:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <HAL_GPIO_Init+0x300>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003400:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <HAL_GPIO_Init+0x300>)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003406:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <HAL_GPIO_Init+0x300>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800342a:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <HAL_GPIO_Init+0x300>)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_GPIO_Init+0x300>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003454:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_GPIO_Init+0x300>)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_GPIO_Init+0x300>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800347e:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <HAL_GPIO_Init+0x300>)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3301      	adds	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f ae9d 	bne.w	80031d4 <HAL_GPIO_Init+0x10>
  }
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010000 	.word	0x40010000
 80034b0:	48000400 	.word	0x48000400
 80034b4:	48000800 	.word	0x48000800
 80034b8:	48000c00 	.word	0x48000c00
 80034bc:	48001000 	.word	0x48001000
 80034c0:	48001400 	.word	0x48001400
 80034c4:	40010400 	.word	0x40010400

080034c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	807b      	strh	r3, [r7, #2]
 80034d4:	4613      	mov	r3, r2
 80034d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d8:	787b      	ldrb	r3, [r7, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d141      	bne.n	800358a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003506:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003512:	d131      	bne.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003514:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800351a:	4a46      	ldr	r2, [pc, #280]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003524:	4b43      	ldr	r3, [pc, #268]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800352c:	4a41      	ldr	r2, [pc, #260]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003532:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003534:	4b40      	ldr	r3, [pc, #256]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2232      	movs	r2, #50	; 0x32
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	4a3f      	ldr	r2, [pc, #252]	; (800363c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003540:	fba2 2303 	umull	r2, r3, r2, r3
 8003544:	0c9b      	lsrs	r3, r3, #18
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354a:	e002      	b.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3b01      	subs	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d102      	bne.n	8003566 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f2      	bne.n	800354c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003566:	4b33      	ldr	r3, [pc, #204]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003572:	d158      	bne.n	8003626 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e057      	b.n	8003628 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003578:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003588:	e04d      	b.n	8003626 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003590:	d141      	bne.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003592:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d131      	bne.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a6:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035b0:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035b8:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2232      	movs	r2, #50	; 0x32
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	0c9b      	lsrs	r3, r3, #18
 80035d2:	3301      	adds	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d6:	e002      	b.n	80035de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3b01      	subs	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d102      	bne.n	80035f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f2      	bne.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	d112      	bne.n	8003626 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e011      	b.n	8003628 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003614:	e007      	b.n	8003626 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800361e:	4a05      	ldr	r2, [pc, #20]	; (8003634 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003624:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40007000 	.word	0x40007000
 8003638:	20000000 	.word	0x20000000
 800363c:	431bde83 	.word	0x431bde83

08003640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e306      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d075      	beq.n	800374a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365e:	4b97      	ldr	r3, [pc, #604]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003668:	4b94      	ldr	r3, [pc, #592]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0x3e>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d002      	beq.n	8003684 <HAL_RCC_OscConfig+0x44>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d10b      	bne.n	800369c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	4b8d      	ldr	r3, [pc, #564]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05b      	beq.n	8003748 <HAL_RCC_OscConfig+0x108>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d157      	bne.n	8003748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e2e1      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a4:	d106      	bne.n	80036b4 <HAL_RCC_OscConfig+0x74>
 80036a6:	4b85      	ldr	r3, [pc, #532]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a84      	ldr	r2, [pc, #528]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e01d      	b.n	80036f0 <HAL_RCC_OscConfig+0xb0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x98>
 80036be:	4b7f      	ldr	r3, [pc, #508]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7e      	ldr	r2, [pc, #504]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b7c      	ldr	r3, [pc, #496]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7b      	ldr	r2, [pc, #492]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0xb0>
 80036d8:	4b78      	ldr	r3, [pc, #480]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a77      	ldr	r2, [pc, #476]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b75      	ldr	r3, [pc, #468]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a74      	ldr	r2, [pc, #464]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80036ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d013      	beq.n	8003720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe faf4 	bl	8001ce4 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7fe faf0 	bl	8001ce4 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e2a6      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003712:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0xc0>
 800371e:	e014      	b.n	800374a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fae0 	bl	8001ce4 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7fe fadc 	bl	8001ce4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e292      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373a:	4b60      	ldr	r3, [pc, #384]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0xe8>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d075      	beq.n	8003842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003760:	4b56      	ldr	r3, [pc, #344]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d102      	bne.n	8003776 <HAL_RCC_OscConfig+0x136>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d002      	beq.n	800377c <HAL_RCC_OscConfig+0x13c>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11f      	bne.n	80037bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377c:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_OscConfig+0x154>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e265      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b49      	ldr	r3, [pc, #292]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	4946      	ldr	r1, [pc, #280]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037a8:	4b45      	ldr	r3, [pc, #276]	; (80038c0 <HAL_RCC_OscConfig+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fa4d 	bl	8001c4c <HAL_InitTick>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d043      	beq.n	8003840 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e251      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d023      	beq.n	800380c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c4:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3c      	ldr	r2, [pc, #240]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80037ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe fa88 	bl	8001ce4 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d8:	f7fe fa84 	bl	8001ce4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e23a      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ea:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	061b      	lsls	r3, r3, #24
 8003804:	492d      	ldr	r1, [pc, #180]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
 800380a:	e01a      	b.n	8003842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380c:	4b2b      	ldr	r3, [pc, #172]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe fa64 	bl	8001ce4 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003820:	f7fe fa60 	bl	8001ce4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e216      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003832:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x1e0>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d041      	beq.n	80038d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01c      	beq.n	8003890 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003856:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385c:	4a17      	ldr	r2, [pc, #92]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fe fa3d 	bl	8001ce4 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386e:	f7fe fa39 	bl	8001ce4 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e1ef      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ef      	beq.n	800386e <HAL_RCC_OscConfig+0x22e>
 800388e:	e020      	b.n	80038d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x27c>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fe fa20 	bl	8001ce4 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a6:	e00d      	b.n	80038c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fe fa1c 	bl	8001ce4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d906      	bls.n	80038c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1d2      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000
 80038c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c4:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1ea      	bne.n	80038a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80a6 	beq.w	8003a2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e0:	2300      	movs	r3, #0
 80038e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038e4:	4b84      	ldr	r3, [pc, #528]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x2b4>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x2b6>
 80038f4:	2300      	movs	r3, #0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	4b7f      	ldr	r3, [pc, #508]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fe:	4a7e      	ldr	r2, [pc, #504]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003904:	6593      	str	r3, [r2, #88]	; 0x58
 8003906:	4b7c      	ldr	r3, [pc, #496]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003912:	2301      	movs	r3, #1
 8003914:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003916:	4b79      	ldr	r3, [pc, #484]	; (8003afc <HAL_RCC_OscConfig+0x4bc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d118      	bne.n	8003954 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x4bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x4bc>)
 8003928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392e:	f7fe f9d9 	bl	8001ce4 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003936:	f7fe f9d5 	bl	8001ce4 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e18b      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003948:	4b6c      	ldr	r3, [pc, #432]	; (8003afc <HAL_RCC_OscConfig+0x4bc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d108      	bne.n	800396e <HAL_RCC_OscConfig+0x32e>
 800395c:	4b66      	ldr	r3, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800396c:	e024      	b.n	80039b8 <HAL_RCC_OscConfig+0x378>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b05      	cmp	r3, #5
 8003974:	d110      	bne.n	8003998 <HAL_RCC_OscConfig+0x358>
 8003976:	4b60      	ldr	r3, [pc, #384]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	4a5e      	ldr	r2, [pc, #376]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003986:	4b5c      	ldr	r3, [pc, #368]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	4a5a      	ldr	r2, [pc, #360]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003996:	e00f      	b.n	80039b8 <HAL_RCC_OscConfig+0x378>
 8003998:	4b57      	ldr	r3, [pc, #348]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 800399a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399e:	4a56      	ldr	r2, [pc, #344]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a8:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe f990 	bl	8001ce4 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fe f98c 	bl	8001ce4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e140      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039de:	4b46      	ldr	r3, [pc, #280]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ed      	beq.n	80039c8 <HAL_RCC_OscConfig+0x388>
 80039ec:	e015      	b.n	8003a1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fe f979 	bl	8001ce4 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fe f975 	bl	8001ce4 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e129      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ed      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a1a:	7ffb      	ldrb	r3, [r7, #31]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	4a34      	ldr	r2, [pc, #208]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a40:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a46:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fe f948 	bl	8001ce4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a58:	f7fe f944 	bl	8001ce4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0fa      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCC_OscConfig+0x418>
 8003a78:	e01b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a80:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fe f92b 	bl	8001ce4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a92:	f7fe f927 	bl	8001ce4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0dd      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ef      	bne.n	8003a92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80d1 	beq.w	8003c5e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f000 808b 	beq.w	8003be0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d15e      	bne.n	8003b90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <HAL_RCC_OscConfig+0x4b8>)
 8003ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe f901 	bl	8001ce4 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ae4:	e00c      	b.n	8003b00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe f8fd 	bl	8001ce4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d905      	bls.n	8003b00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0b3      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b00:	4b59      	ldr	r3, [pc, #356]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ec      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b0c:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_RCC_OscConfig+0x62c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6a11      	ldr	r1, [r2, #32]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	0112      	lsls	r2, r2, #4
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b26:	0212      	lsls	r2, r2, #8
 8003b28:	4311      	orrs	r1, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b2e:	0852      	lsrs	r2, r2, #1
 8003b30:	3a01      	subs	r2, #1
 8003b32:	0552      	lsls	r2, r2, #21
 8003b34:	4311      	orrs	r1, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b3a:	0852      	lsrs	r2, r2, #1
 8003b3c:	3a01      	subs	r2, #1
 8003b3e:	0652      	lsls	r2, r2, #25
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b46:	06d2      	lsls	r2, r2, #27
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	4947      	ldr	r1, [pc, #284]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b50:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a44      	ldr	r2, [pc, #272]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a41      	ldr	r2, [pc, #260]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe f8bc 	bl	8001ce4 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fe f8b8 	bl	8001ce4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e06e      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b82:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x530>
 8003b8e:	e066      	b.n	8003c5e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b90:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a34      	ldr	r2, [pc, #208]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a31      	ldr	r2, [pc, #196]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003bae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f894 	bl	8001ce4 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fe f890 	bl	8001ce4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e046      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd2:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x580>
 8003bde:	e03e      	b.n	8003c5e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e039      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_RCC_OscConfig+0x628>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 0203 	and.w	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d12c      	bne.n	8003c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d123      	bne.n	8003c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d11b      	bne.n	8003c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d113      	bne.n	8003c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	3b01      	subs	r3, #1
 8003c54:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	019f800c 	.word	0x019f800c

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e11e      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b91      	ldr	r3, [pc, #580]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b8e      	ldr	r3, [pc, #568]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 020f 	bic.w	r2, r3, #15
 8003c9e:	498c      	ldr	r1, [pc, #560]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b8a      	ldr	r3, [pc, #552]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e106      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d073      	beq.n	8003dac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d129      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ccc:	4b81      	ldr	r3, [pc, #516]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0f4      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003cdc:	f000 f99e 	bl	800401c <RCC_GetSysClockFreqFromPLLSource>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_RCC_ClockConfig+0x268>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d93f      	bls.n	8003d6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cea:	4b7a      	ldr	r3, [pc, #488]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d033      	beq.n	8003d6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d12f      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d0a:	4b72      	ldr	r3, [pc, #456]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d12:	4a70      	ldr	r2, [pc, #448]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e024      	b.n	8003d6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d28:	4b6a      	ldr	r3, [pc, #424]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d109      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0c6      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d38:	4b66      	ldr	r3, [pc, #408]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0be      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d48:	f000 f8ce 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4a61      	ldr	r2, [pc, #388]	; (8003ed8 <HAL_RCC_ClockConfig+0x268>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d909      	bls.n	8003d6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d56:	4b5f      	ldr	r3, [pc, #380]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d5e:	4a5d      	ldr	r2, [pc, #372]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d6a:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 0203 	bic.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4957      	ldr	r1, [pc, #348]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7c:	f7fd ffb2 	bl	8001ce4 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d84:	f7fd ffae 	bl	8001ce4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e095      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	4b4e      	ldr	r3, [pc, #312]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 020c 	and.w	r2, r3, #12
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d1eb      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d023      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc4:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a42      	ldr	r2, [pc, #264]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ddc:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003de4:	4a3b      	ldr	r2, [pc, #236]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b39      	ldr	r3, [pc, #228]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4936      	ldr	r1, [pc, #216]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e06:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4a32      	ldr	r2, [pc, #200]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e12:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d21d      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 020f 	bic.w	r2, r3, #15
 8003e28:	4929      	ldr	r1, [pc, #164]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e30:	f7fd ff58 	bl	8001ce4 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fd ff54 	bl	8001ce4 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e03b      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d1ed      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4917      	ldr	r1, [pc, #92]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	490f      	ldr	r1, [pc, #60]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e9a:	f000 f825 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_RCC_ClockConfig+0x264>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	490c      	ldr	r1, [pc, #48]	; (8003edc <HAL_RCC_ClockConfig+0x26c>)
 8003eac:	5ccb      	ldrb	r3, [r1, r3]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x270>)
 8003eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_RCC_ClockConfig+0x274>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fd fec4 	bl	8001c4c <HAL_InitTick>
 8003ec4:	4603      	mov	r3, r0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	04c4b400 	.word	0x04c4b400
 8003edc:	0800697c 	.word	0x0800697c
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003eee:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d102      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	e047      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f00:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d102      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	e03e      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d136      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3301      	adds	r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d10c      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f46:	68d2      	ldr	r2, [r2, #12]
 8003f48:	0a12      	lsrs	r2, r2, #8
 8003f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	617b      	str	r3, [r7, #20]
      break;
 8003f54:	e00c      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f56:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f60:	68d2      	ldr	r2, [r2, #12]
 8003f62:	0a12      	lsrs	r2, r2, #8
 8003f64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	617b      	str	r3, [r7, #20]
      break;
 8003f6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	0e5b      	lsrs	r3, r3, #25
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	e001      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f90:	693b      	ldr	r3, [r7, #16]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	00f42400 	.word	0x00f42400
 8003fa8:	007a1200 	.word	0x007a1200

08003fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000000 	.word	0x20000000

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fc8:	f7ff fff0 	bl	8003fac <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4904      	ldr	r1, [pc, #16]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	0800698c 	.word	0x0800698c

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ff4:	f7ff ffda 	bl	8003fac <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0adb      	lsrs	r3, r3, #11
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	0800698c 	.word	0x0800698c

0800401c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004022:	4b1e      	ldr	r3, [pc, #120]	; (800409c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d10c      	bne.n	800405a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004040:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	4a14      	ldr	r2, [pc, #80]	; (800409c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800404a:	68d2      	ldr	r2, [r2, #12]
 800404c:	0a12      	lsrs	r2, r2, #8
 800404e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	617b      	str	r3, [r7, #20]
    break;
 8004058:	e00c      	b.n	8004074 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	0a12      	lsrs	r2, r2, #8
 8004068:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800406c:	fb02 f303 	mul.w	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]
    break;
 8004072:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	0e5b      	lsrs	r3, r3, #25
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800408e:	687b      	ldr	r3, [r7, #4]
}
 8004090:	4618      	mov	r0, r3
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40021000 	.word	0x40021000
 80040a0:	007a1200 	.word	0x007a1200
 80040a4:	00f42400 	.word	0x00f42400

080040a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040b0:	2300      	movs	r3, #0
 80040b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040b4:	2300      	movs	r3, #0
 80040b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8098 	beq.w	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ca:	4b43      	ldr	r3, [pc, #268]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
 80040e2:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f2:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a39      	ldr	r2, [pc, #228]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040fe:	f7fd fdf1 	bl	8001ce4 <HAL_GetTick>
 8004102:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004104:	e009      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fd fded 	bl	8001ce4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d902      	bls.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	74fb      	strb	r3, [r7, #19]
        break;
 8004118:	e005      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800411a:	4b30      	ldr	r3, [pc, #192]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ef      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d159      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01e      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	d019      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004154:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800416c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004174:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd fdad 	bl	8001ce4 <HAL_GetTick>
 800418a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418c:	e00b      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd fda9 	bl	8001ce4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d902      	bls.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	74fb      	strb	r3, [r7, #19]
            break;
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ec      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	4903      	ldr	r1, [pc, #12]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	74bb      	strb	r3, [r7, #18]
 80041d6:	e005      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e4:	7c7b      	ldrb	r3, [r7, #17]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d105      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ea:	4ba6      	ldr	r3, [pc, #664]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	4aa5      	ldr	r2, [pc, #660]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004202:	4ba0      	ldr	r3, [pc, #640]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f023 0203 	bic.w	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	499c      	ldr	r1, [pc, #624]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004224:	4b97      	ldr	r3, [pc, #604]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 020c 	bic.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	4994      	ldr	r1, [pc, #592]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004246:	4b8f      	ldr	r3, [pc, #572]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	498b      	ldr	r1, [pc, #556]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004268:	4b86      	ldr	r3, [pc, #536]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4983      	ldr	r1, [pc, #524]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800428a:	4b7e      	ldr	r3, [pc, #504]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	497a      	ldr	r1, [pc, #488]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ac:	4b75      	ldr	r3, [pc, #468]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	4972      	ldr	r1, [pc, #456]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ce:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4969      	ldr	r1, [pc, #420]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f0:	4b64      	ldr	r3, [pc, #400]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4961      	ldr	r1, [pc, #388]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	4958      	ldr	r1, [pc, #352]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004334:	4b53      	ldr	r3, [pc, #332]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	4950      	ldr	r1, [pc, #320]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a4a      	ldr	r2, [pc, #296]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800436c:	4b45      	ldr	r3, [pc, #276]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	4942      	ldr	r1, [pc, #264]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a3c      	ldr	r2, [pc, #240]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043a4:	4b37      	ldr	r3, [pc, #220]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	4934      	ldr	r1, [pc, #208]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c2:	d105      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c4:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a2e      	ldr	r2, [pc, #184]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043dc:	4b29      	ldr	r3, [pc, #164]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	4926      	ldr	r1, [pc, #152]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fc:	4b21      	ldr	r3, [pc, #132]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a20      	ldr	r2, [pc, #128]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004406:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	4918      	ldr	r1, [pc, #96]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004432:	d105      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004434:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800444c:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	490a      	ldr	r1, [pc, #40]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004476:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004478:	7cbb      	ldrb	r3, [r7, #18]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000

08004488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e049      	b.n	800452e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fa34 	bl	800191c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f000 fa4a 	bl	8004960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_TIM_PWM_Start+0x24>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e03c      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d109      	bne.n	8004576 <HAL_TIM_PWM_Start+0x3e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e02f      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d109      	bne.n	8004590 <HAL_TIM_PWM_Start+0x58>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e022      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d109      	bne.n	80045aa <HAL_TIM_PWM_Start+0x72>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e015      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x8c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e008      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e097      	b.n	800470e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Start+0xb6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ec:	e023      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_PWM_Start+0xc6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fc:	e01b      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d104      	bne.n	800460e <HAL_TIM_PWM_Start+0xd6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800460c:	e013      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d104      	bne.n	800461e <HAL_TIM_PWM_Start+0xe6>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800461c:	e00b      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b10      	cmp	r3, #16
 8004622:	d104      	bne.n	800462e <HAL_TIM_PWM_Start+0xf6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800462c:	e003      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2201      	movs	r2, #1
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fd14 	bl	800506c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a33      	ldr	r2, [pc, #204]	; (8004718 <HAL_TIM_PWM_Start+0x1e0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_TIM_PWM_Start+0x13e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a32      	ldr	r2, [pc, #200]	; (800471c <HAL_TIM_PWM_Start+0x1e4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_TIM_PWM_Start+0x13e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a30      	ldr	r2, [pc, #192]	; (8004720 <HAL_TIM_PWM_Start+0x1e8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_TIM_PWM_Start+0x13e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <HAL_TIM_PWM_Start+0x1ec>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_TIM_PWM_Start+0x13e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2d      	ldr	r2, [pc, #180]	; (8004728 <HAL_TIM_PWM_Start+0x1f0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_TIM_PWM_Start+0x142>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_TIM_PWM_Start+0x144>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800468e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <HAL_TIM_PWM_Start+0x1e0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d018      	beq.n	80046cc <HAL_TIM_PWM_Start+0x194>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d013      	beq.n	80046cc <HAL_TIM_PWM_Start+0x194>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a20      	ldr	r2, [pc, #128]	; (800472c <HAL_TIM_PWM_Start+0x1f4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_TIM_PWM_Start+0x194>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <HAL_TIM_PWM_Start+0x1f8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_TIM_PWM_Start+0x194>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a17      	ldr	r2, [pc, #92]	; (800471c <HAL_TIM_PWM_Start+0x1e4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_TIM_PWM_Start+0x194>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_TIM_PWM_Start+0x1e8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d115      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <HAL_TIM_PWM_Start+0x1fc>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d015      	beq.n	800470a <HAL_TIM_PWM_Start+0x1d2>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d011      	beq.n	800470a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	e008      	b.n	800470a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e000      	b.n	800470c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800
 8004734:	00010007 	.word	0x00010007

08004738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004752:	2302      	movs	r3, #2
 8004754:	e0ff      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b14      	cmp	r3, #20
 8004762:	f200 80f0 	bhi.w	8004946 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	080047c1 	.word	0x080047c1
 8004770:	08004947 	.word	0x08004947
 8004774:	08004947 	.word	0x08004947
 8004778:	08004947 	.word	0x08004947
 800477c:	08004801 	.word	0x08004801
 8004780:	08004947 	.word	0x08004947
 8004784:	08004947 	.word	0x08004947
 8004788:	08004947 	.word	0x08004947
 800478c:	08004843 	.word	0x08004843
 8004790:	08004947 	.word	0x08004947
 8004794:	08004947 	.word	0x08004947
 8004798:	08004947 	.word	0x08004947
 800479c:	08004883 	.word	0x08004883
 80047a0:	08004947 	.word	0x08004947
 80047a4:	08004947 	.word	0x08004947
 80047a8:	08004947 	.word	0x08004947
 80047ac:	080048c5 	.word	0x080048c5
 80047b0:	08004947 	.word	0x08004947
 80047b4:	08004947 	.word	0x08004947
 80047b8:	08004947 	.word	0x08004947
 80047bc:	08004905 	.word	0x08004905
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f95a 	bl	8004a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0204 	bic.w	r2, r2, #4
 80047ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	619a      	str	r2, [r3, #24]
      break;
 80047fe:	e0a5      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f9ca 	bl	8004ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800481a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6999      	ldr	r1, [r3, #24]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	021a      	lsls	r2, r3, #8
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	619a      	str	r2, [r3, #24]
      break;
 8004840:	e084      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fa33 	bl	8004cb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0208 	orr.w	r2, r2, #8
 800485c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0204 	bic.w	r2, r2, #4
 800486c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	61da      	str	r2, [r3, #28]
      break;
 8004880:	e064      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fa9b 	bl	8004dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69d9      	ldr	r1, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	021a      	lsls	r2, r3, #8
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	61da      	str	r2, [r3, #28]
      break;
 80048c2:	e043      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fb04 	bl	8004ed8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0208 	orr.w	r2, r2, #8
 80048de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0204 	bic.w	r2, r2, #4
 80048ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004902:	e023      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fb48 	bl	8004fa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800491e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004944:	e002      	b.n	800494c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop

08004960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <TIM_Base_SetConfig+0x104>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00f      	beq.n	8004998 <TIM_Base_SetConfig+0x38>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497e:	d00b      	beq.n	8004998 <TIM_Base_SetConfig+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a39      	ldr	r2, [pc, #228]	; (8004a68 <TIM_Base_SetConfig+0x108>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <TIM_Base_SetConfig+0x10c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0x38>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a37      	ldr	r2, [pc, #220]	; (8004a70 <TIM_Base_SetConfig+0x110>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d108      	bne.n	80049aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2d      	ldr	r2, [pc, #180]	; (8004a64 <TIM_Base_SetConfig+0x104>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01b      	beq.n	80049ea <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d017      	beq.n	80049ea <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <TIM_Base_SetConfig+0x108>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a29      	ldr	r2, [pc, #164]	; (8004a6c <TIM_Base_SetConfig+0x10c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00f      	beq.n	80049ea <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <TIM_Base_SetConfig+0x110>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_Base_SetConfig+0x8a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <TIM_Base_SetConfig+0x8a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_Base_SetConfig+0x8a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d108      	bne.n	80049fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <TIM_Base_SetConfig+0x104>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00f      	beq.n	8004a48 <TIM_Base_SetConfig+0xe8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <TIM_Base_SetConfig+0x110>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <TIM_Base_SetConfig+0xe8>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_Base_SetConfig+0xe8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0f      	ldr	r2, [pc, #60]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0xe8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d103      	bne.n	8004a50 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	615a      	str	r2, [r3, #20]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40013400 	.word	0x40013400
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800

08004a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f023 0201 	bic.w	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 0302 	bic.w	r3, r3, #2
 8004acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <TIM_OC1_SetConfig+0x10c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00f      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a2b      	ldr	r2, [pc, #172]	; (8004b90 <TIM_OC1_SetConfig+0x110>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a2a      	ldr	r2, [pc, #168]	; (8004b94 <TIM_OC1_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d007      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <TIM_OC1_SetConfig+0x118>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC1_SetConfig+0x80>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <TIM_OC1_SetConfig+0x11c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0308 	bic.w	r3, r3, #8
 8004b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <TIM_OC1_SetConfig+0x10c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <TIM_OC1_SetConfig+0x110>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <TIM_OC1_SetConfig+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <TIM_OC1_SetConfig+0x118>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC1_SetConfig+0xc2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <TIM_OC1_SetConfig+0x11c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d111      	bne.n	8004b66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	621a      	str	r2, [r3, #32]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0210 	bic.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0320 	bic.w	r3, r3, #32
 8004bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <TIM_OC2_SetConfig+0x100>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_OC2_SetConfig+0x6c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <TIM_OC2_SetConfig+0x104>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10d      	bne.n	8004c28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <TIM_OC2_SetConfig+0x100>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00f      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <TIM_OC2_SetConfig+0x104>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <TIM_OC2_SetConfig+0x108>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a1a      	ldr	r2, [pc, #104]	; (8004cac <TIM_OC2_SetConfig+0x10c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC2_SetConfig+0xb0>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <TIM_OC2_SetConfig+0x110>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d113      	bne.n	8004c78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40013400 	.word	0x40013400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800

08004cb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_OC3_SetConfig+0xfc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_OC3_SetConfig+0x6a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_OC3_SetConfig+0x100>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10d      	bne.n	8004d3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <TIM_OC3_SetConfig+0xfc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <TIM_OC3_SetConfig+0x100>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1a      	ldr	r2, [pc, #104]	; (8004db8 <TIM_OC3_SetConfig+0x104>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <TIM_OC3_SetConfig+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_OC3_SetConfig+0xae>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <TIM_OC3_SetConfig+0x10c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d113      	bne.n	8004d8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <TIM_OC4_SetConfig+0x100>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_OC4_SetConfig+0x6c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <TIM_OC4_SetConfig+0x104>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10d      	bne.n	8004e4c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	031b      	lsls	r3, r3, #12
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <TIM_OC4_SetConfig+0x100>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00f      	beq.n	8004e74 <TIM_OC4_SetConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <TIM_OC4_SetConfig+0x104>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <TIM_OC4_SetConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <TIM_OC4_SetConfig+0x108>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <TIM_OC4_SetConfig+0xb0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <TIM_OC4_SetConfig+0x10c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC4_SetConfig+0xb0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <TIM_OC4_SetConfig+0x110>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d113      	bne.n	8004e9c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <TIM_OC5_SetConfig+0xb4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00f      	beq.n	8004f52 <TIM_OC5_SetConfig+0x7a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <TIM_OC5_SetConfig+0xb8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <TIM_OC5_SetConfig+0x7a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <TIM_OC5_SetConfig+0xbc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d007      	beq.n	8004f52 <TIM_OC5_SetConfig+0x7a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <TIM_OC5_SetConfig+0xc0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC5_SetConfig+0x7a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <TIM_OC5_SetConfig+0xc4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d109      	bne.n	8004f66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40013400 	.word	0x40013400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800

08004fa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	051b      	lsls	r3, r3, #20
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a18      	ldr	r2, [pc, #96]	; (8005058 <TIM_OC6_SetConfig+0xb8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00f      	beq.n	800501c <TIM_OC6_SetConfig+0x7c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a17      	ldr	r2, [pc, #92]	; (800505c <TIM_OC6_SetConfig+0xbc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00b      	beq.n	800501c <TIM_OC6_SetConfig+0x7c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a16      	ldr	r2, [pc, #88]	; (8005060 <TIM_OC6_SetConfig+0xc0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_OC6_SetConfig+0x7c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <TIM_OC6_SetConfig+0xc4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_OC6_SetConfig+0x7c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a14      	ldr	r2, [pc, #80]	; (8005068 <TIM_OC6_SetConfig+0xc8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d109      	bne.n	8005030 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005022:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	029b      	lsls	r3, r3, #10
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40013400 	.word	0x40013400
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800

0800506c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2201      	movs	r2, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1a      	ldr	r2, [r3, #32]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	43db      	mvns	r3, r3
 800508e:	401a      	ands	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e065      	b.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2b      	ldr	r2, [pc, #172]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800510a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800511c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d018      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d013      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a12      	ldr	r2, [pc, #72]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10c      	bne.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005176:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40013400 	.word	0x40013400
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40014000 	.word	0x40014000

080051bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e087      	b.n	80052e8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	041b      	lsls	r3, r3, #16
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a25      	ldr	r2, [pc, #148]	; (80052f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d106      	bne.n	8005274 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d126      	bne.n	80052d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	051b      	lsls	r3, r3, #20
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d106      	bne.n	80052d6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400

080052fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e042      	b.n	8005394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fc fb87 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2224      	movs	r2, #36	; 0x24
 800532a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f8c2 	bl	80054c8 <UART_SetConfig>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e022      	b.n	8005394 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fb82 	bl	8005a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fc09 	bl	8005ba4 <UART_CheckIdleState>
 8005392:	4603      	mov	r3, r0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	f040 8083 	bne.w	80054be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_UART_Transmit+0x28>
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e07b      	b.n	80054c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_UART_Transmit+0x3a>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e074      	b.n	80054c0 <HAL_UART_Transmit+0x124>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2221      	movs	r2, #33	; 0x21
 80053ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ee:	f7fc fc79 	bl	8001ce4 <HAL_GetTick>
 80053f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d108      	bne.n	8005420 <HAL_UART_Transmit+0x84>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	e003      	b.n	8005428 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005430:	e02c      	b.n	800548c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fbfc 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e039      	b.n	80054c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10b      	bne.n	800546a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005460:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	3302      	adds	r3, #2
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	e007      	b.n	800547a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	3301      	adds	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1cc      	bne.n	8005432 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2200      	movs	r2, #0
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fbc9 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e006      	b.n	80054c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e000      	b.n	80054c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80054be:	2302      	movs	r3, #2
  }
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054cc:	b08c      	sub	sp, #48	; 0x30
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4bab      	ldr	r3, [pc, #684]	; (80057a4 <UART_SetConfig+0x2dc>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005500:	430b      	orrs	r3, r1
 8005502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4aa0      	ldr	r2, [pc, #640]	; (80057a8 <UART_SetConfig+0x2e0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d004      	beq.n	8005534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005530:	4313      	orrs	r3, r2
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800553e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005548:	430b      	orrs	r3, r1
 800554a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	f023 010f 	bic.w	r1, r3, #15
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a91      	ldr	r2, [pc, #580]	; (80057ac <UART_SetConfig+0x2e4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d125      	bne.n	80055b8 <UART_SetConfig+0xf0>
 800556c:	4b90      	ldr	r3, [pc, #576]	; (80057b0 <UART_SetConfig+0x2e8>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	2b03      	cmp	r3, #3
 8005578:	d81a      	bhi.n	80055b0 <UART_SetConfig+0xe8>
 800557a:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0xb8>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	08005591 	.word	0x08005591
 8005584:	080055a1 	.word	0x080055a1
 8005588:	08005599 	.word	0x08005599
 800558c:	080055a9 	.word	0x080055a9
 8005590:	2301      	movs	r3, #1
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005596:	e0d6      	b.n	8005746 <UART_SetConfig+0x27e>
 8005598:	2302      	movs	r3, #2
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559e:	e0d2      	b.n	8005746 <UART_SetConfig+0x27e>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a6:	e0ce      	b.n	8005746 <UART_SetConfig+0x27e>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ae:	e0ca      	b.n	8005746 <UART_SetConfig+0x27e>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b6:	e0c6      	b.n	8005746 <UART_SetConfig+0x27e>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a7d      	ldr	r2, [pc, #500]	; (80057b4 <UART_SetConfig+0x2ec>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d138      	bne.n	8005634 <UART_SetConfig+0x16c>
 80055c2:	4b7b      	ldr	r3, [pc, #492]	; (80057b0 <UART_SetConfig+0x2e8>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f003 030c 	and.w	r3, r3, #12
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	d82d      	bhi.n	800562c <UART_SetConfig+0x164>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x110>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	0800562d 	.word	0x0800562d
 80055e0:	0800562d 	.word	0x0800562d
 80055e4:	0800562d 	.word	0x0800562d
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	0800562d 	.word	0x0800562d
 80055f0:	0800562d 	.word	0x0800562d
 80055f4:	0800562d 	.word	0x0800562d
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800562d 	.word	0x0800562d
 8005600:	0800562d 	.word	0x0800562d
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005625 	.word	0x08005625
 800560c:	2300      	movs	r3, #0
 800560e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005612:	e098      	b.n	8005746 <UART_SetConfig+0x27e>
 8005614:	2302      	movs	r3, #2
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561a:	e094      	b.n	8005746 <UART_SetConfig+0x27e>
 800561c:	2304      	movs	r3, #4
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005622:	e090      	b.n	8005746 <UART_SetConfig+0x27e>
 8005624:	2308      	movs	r3, #8
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562a:	e08c      	b.n	8005746 <UART_SetConfig+0x27e>
 800562c:	2310      	movs	r3, #16
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005632:	e088      	b.n	8005746 <UART_SetConfig+0x27e>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a5f      	ldr	r2, [pc, #380]	; (80057b8 <UART_SetConfig+0x2f0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d125      	bne.n	800568a <UART_SetConfig+0x1c2>
 800563e:	4b5c      	ldr	r3, [pc, #368]	; (80057b0 <UART_SetConfig+0x2e8>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	d016      	beq.n	800567a <UART_SetConfig+0x1b2>
 800564c:	2b30      	cmp	r3, #48	; 0x30
 800564e:	d818      	bhi.n	8005682 <UART_SetConfig+0x1ba>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d00a      	beq.n	800566a <UART_SetConfig+0x1a2>
 8005654:	2b20      	cmp	r3, #32
 8005656:	d814      	bhi.n	8005682 <UART_SetConfig+0x1ba>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <UART_SetConfig+0x19a>
 800565c:	2b10      	cmp	r3, #16
 800565e:	d008      	beq.n	8005672 <UART_SetConfig+0x1aa>
 8005660:	e00f      	b.n	8005682 <UART_SetConfig+0x1ba>
 8005662:	2300      	movs	r3, #0
 8005664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005668:	e06d      	b.n	8005746 <UART_SetConfig+0x27e>
 800566a:	2302      	movs	r3, #2
 800566c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005670:	e069      	b.n	8005746 <UART_SetConfig+0x27e>
 8005672:	2304      	movs	r3, #4
 8005674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005678:	e065      	b.n	8005746 <UART_SetConfig+0x27e>
 800567a:	2308      	movs	r3, #8
 800567c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005680:	e061      	b.n	8005746 <UART_SetConfig+0x27e>
 8005682:	2310      	movs	r3, #16
 8005684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005688:	e05d      	b.n	8005746 <UART_SetConfig+0x27e>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a4b      	ldr	r2, [pc, #300]	; (80057bc <UART_SetConfig+0x2f4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d125      	bne.n	80056e0 <UART_SetConfig+0x218>
 8005694:	4b46      	ldr	r3, [pc, #280]	; (80057b0 <UART_SetConfig+0x2e8>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800569e:	2bc0      	cmp	r3, #192	; 0xc0
 80056a0:	d016      	beq.n	80056d0 <UART_SetConfig+0x208>
 80056a2:	2bc0      	cmp	r3, #192	; 0xc0
 80056a4:	d818      	bhi.n	80056d8 <UART_SetConfig+0x210>
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d00a      	beq.n	80056c0 <UART_SetConfig+0x1f8>
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d814      	bhi.n	80056d8 <UART_SetConfig+0x210>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <UART_SetConfig+0x1f0>
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d008      	beq.n	80056c8 <UART_SetConfig+0x200>
 80056b6:	e00f      	b.n	80056d8 <UART_SetConfig+0x210>
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056be:	e042      	b.n	8005746 <UART_SetConfig+0x27e>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c6:	e03e      	b.n	8005746 <UART_SetConfig+0x27e>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ce:	e03a      	b.n	8005746 <UART_SetConfig+0x27e>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d6:	e036      	b.n	8005746 <UART_SetConfig+0x27e>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056de:	e032      	b.n	8005746 <UART_SetConfig+0x27e>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a30      	ldr	r2, [pc, #192]	; (80057a8 <UART_SetConfig+0x2e0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d12a      	bne.n	8005740 <UART_SetConfig+0x278>
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <UART_SetConfig+0x2e8>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056f8:	d01a      	beq.n	8005730 <UART_SetConfig+0x268>
 80056fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056fe:	d81b      	bhi.n	8005738 <UART_SetConfig+0x270>
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005704:	d00c      	beq.n	8005720 <UART_SetConfig+0x258>
 8005706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570a:	d815      	bhi.n	8005738 <UART_SetConfig+0x270>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <UART_SetConfig+0x250>
 8005710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005714:	d008      	beq.n	8005728 <UART_SetConfig+0x260>
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x270>
 8005718:	2300      	movs	r3, #0
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800571e:	e012      	b.n	8005746 <UART_SetConfig+0x27e>
 8005720:	2302      	movs	r3, #2
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005726:	e00e      	b.n	8005746 <UART_SetConfig+0x27e>
 8005728:	2304      	movs	r3, #4
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572e:	e00a      	b.n	8005746 <UART_SetConfig+0x27e>
 8005730:	2308      	movs	r3, #8
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005736:	e006      	b.n	8005746 <UART_SetConfig+0x27e>
 8005738:	2310      	movs	r3, #16
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e002      	b.n	8005746 <UART_SetConfig+0x27e>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <UART_SetConfig+0x2e0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	f040 80a8 	bne.w	80058a2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005756:	2b08      	cmp	r3, #8
 8005758:	d834      	bhi.n	80057c4 <UART_SetConfig+0x2fc>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0x298>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005785 	.word	0x08005785
 8005764:	080057c5 	.word	0x080057c5
 8005768:	0800578d 	.word	0x0800578d
 800576c:	080057c5 	.word	0x080057c5
 8005770:	08005793 	.word	0x08005793
 8005774:	080057c5 	.word	0x080057c5
 8005778:	080057c5 	.word	0x080057c5
 800577c:	080057c5 	.word	0x080057c5
 8005780:	0800579b 	.word	0x0800579b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005784:	f7fe fc1e 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8005788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800578a:	e021      	b.n	80057d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <UART_SetConfig+0x2f8>)
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005790:	e01e      	b.n	80057d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005792:	f7fe fba9 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005798:	e01a      	b.n	80057d0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057a0:	e016      	b.n	80057d0 <UART_SetConfig+0x308>
 80057a2:	bf00      	nop
 80057a4:	cfff69f3 	.word	0xcfff69f3
 80057a8:	40008000 	.word	0x40008000
 80057ac:	40013800 	.word	0x40013800
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40004400 	.word	0x40004400
 80057b8:	40004800 	.word	0x40004800
 80057bc:	40004c00 	.word	0x40004c00
 80057c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80057ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 812a 	beq.w	8005a2c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	4a9e      	ldr	r2, [pc, #632]	; (8005a58 <UART_SetConfig+0x590>)
 80057de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d305      	bcc.n	8005808 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	429a      	cmp	r2, r3
 8005806:	d903      	bls.n	8005810 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800580e:	e10d      	b.n	8005a2c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	2200      	movs	r2, #0
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	60fa      	str	r2, [r7, #12]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	4a8e      	ldr	r2, [pc, #568]	; (8005a58 <UART_SetConfig+0x590>)
 800581e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005822:	b29b      	uxth	r3, r3
 8005824:	2200      	movs	r2, #0
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	607a      	str	r2, [r7, #4]
 800582a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800582e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005832:	f7fb f9eb 	bl	8000c0c <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	020b      	lsls	r3, r1, #8
 8005848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800584c:	0202      	lsls	r2, r0, #8
 800584e:	6979      	ldr	r1, [r7, #20]
 8005850:	6849      	ldr	r1, [r1, #4]
 8005852:	0849      	lsrs	r1, r1, #1
 8005854:	2000      	movs	r0, #0
 8005856:	460c      	mov	r4, r1
 8005858:	4605      	mov	r5, r0
 800585a:	eb12 0804 	adds.w	r8, r2, r4
 800585e:	eb43 0905 	adc.w	r9, r3, r5
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	469a      	mov	sl, r3
 800586a:	4693      	mov	fp, r2
 800586c:	4652      	mov	r2, sl
 800586e:	465b      	mov	r3, fp
 8005870:	4640      	mov	r0, r8
 8005872:	4649      	mov	r1, r9
 8005874:	f7fb f9ca 	bl	8000c0c <__aeabi_uldivmod>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4613      	mov	r3, r2
 800587e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005886:	d308      	bcc.n	800589a <UART_SetConfig+0x3d2>
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800588e:	d204      	bcs.n	800589a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a3a      	ldr	r2, [r7, #32]
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	e0c8      	b.n	8005a2c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058a0:	e0c4      	b.n	8005a2c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058aa:	d167      	bne.n	800597c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80058ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d828      	bhi.n	8005906 <UART_SetConfig+0x43e>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <UART_SetConfig+0x3f4>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	08005907 	.word	0x08005907
 80058cc:	080058f7 	.word	0x080058f7
 80058d0:	08005907 	.word	0x08005907
 80058d4:	08005907 	.word	0x08005907
 80058d8:	08005907 	.word	0x08005907
 80058dc:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7fe fb70 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 80058e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058e6:	e014      	b.n	8005912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e8:	f7fe fb82 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 80058ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ee:	e010      	b.n	8005912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b5a      	ldr	r3, [pc, #360]	; (8005a5c <UART_SetConfig+0x594>)
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058f4:	e00d      	b.n	8005912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fe faf7 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 80058fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8089 	beq.w	8005a2c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	4a4e      	ldr	r2, [pc, #312]	; (8005a58 <UART_SetConfig+0x590>)
 8005920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005924:	461a      	mov	r2, r3
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	fbb3 f3f2 	udiv	r3, r3, r2
 800592c:	005a      	lsls	r2, r3, #1
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	441a      	add	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	2b0f      	cmp	r3, #15
 8005944:	d916      	bls.n	8005974 <UART_SetConfig+0x4ac>
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d212      	bcs.n	8005974 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f023 030f 	bic.w	r3, r3, #15
 8005956:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	085b      	lsrs	r3, r3, #1
 800595c:	b29b      	uxth	r3, r3
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	b29a      	uxth	r2, r3
 8005964:	8bfb      	ldrh	r3, [r7, #30]
 8005966:	4313      	orrs	r3, r2
 8005968:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	8bfa      	ldrh	r2, [r7, #30]
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	e05b      	b.n	8005a2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800597a:	e057      	b.n	8005a2c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800597c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005980:	2b08      	cmp	r3, #8
 8005982:	d828      	bhi.n	80059d6 <UART_SetConfig+0x50e>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <UART_SetConfig+0x4c4>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059d7 	.word	0x080059d7
 800599c:	080059c7 	.word	0x080059c7
 80059a0:	080059d7 	.word	0x080059d7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	080059d7 	.word	0x080059d7
 80059ac:	080059cf 	.word	0x080059cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe fb08 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 80059b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059b6:	e014      	b.n	80059e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fe fb1a 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 80059bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059be:	e010      	b.n	80059e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <UART_SetConfig+0x594>)
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059c4:	e00d      	b.n	80059e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c6:	f7fe fa8f 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 80059ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059cc:	e009      	b.n	80059e2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059d4:	e005      	b.n	80059e2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059e0:	bf00      	nop
    }

    if (pclk != 0U)
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d021      	beq.n	8005a2c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <UART_SetConfig+0x590>)
 80059ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f2:	461a      	mov	r2, r3
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	441a      	add	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	d909      	bls.n	8005a26 <UART_SetConfig+0x55e>
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a18:	d205      	bcs.n	8005a26 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60da      	str	r2, [r3, #12]
 8005a24:	e002      	b.n	8005a2c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005a48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3730      	adds	r7, #48	; 0x30
 8005a50:	46bd      	mov	sp, r7
 8005a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a56:	bf00      	nop
 8005a58:	08006994 	.word	0x08006994
 8005a5c:	00f42400 	.word	0x00f42400

08005a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01a      	beq.n	8005b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5e:	d10a      	bne.n	8005b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]
  }
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb4:	f7fc f896 	bl	8001ce4 <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d10e      	bne.n	8005be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f82f 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e025      	b.n	8005c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d10e      	bne.n	8005c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f819 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e00f      	b.n	8005c32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b09c      	sub	sp, #112	; 0x70
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	e0a9      	b.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	f000 80a5 	beq.w	8005da0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c56:	f7fc f845 	bl	8001ce4 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d302      	bcc.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d140      	bne.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c80:	667b      	str	r3, [r7, #100]	; 0x64
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e6      	bne.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e069      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d051      	beq.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0a:	d149      	bne.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
 8005d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	613b      	str	r3, [r7, #16]
   return(result);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d68:	623a      	str	r2, [r7, #32]
 8005d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	69f9      	ldr	r1, [r7, #28]
 8005d6e:	6a3a      	ldr	r2, [r7, #32]
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e5      	bne.n	8005d48 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e010      	b.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	f43f af46 	beq.w	8005c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3770      	adds	r7, #112	; 0x70
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e027      	b.n	8005e30 <HAL_UARTEx_DisableFifoMode+0x66>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2224      	movs	r2, #36	; 0x24
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e02d      	b.n	8005eb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2224      	movs	r2, #36	; 0x24
 8005e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f84f 	bl	8005f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e02d      	b.n	8005f2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2224      	movs	r2, #36	; 0x24
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f811 	bl	8005f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d108      	bne.n	8005f56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f54:	e031      	b.n	8005fba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f56:	2308      	movs	r3, #8
 8005f58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	0e5b      	lsrs	r3, r3, #25
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	0f5b      	lsrs	r3, r3, #29
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f7e:	7bbb      	ldrb	r3, [r7, #14]
 8005f80:	7b3a      	ldrb	r2, [r7, #12]
 8005f82:	4911      	ldr	r1, [pc, #68]	; (8005fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8005f84:	5c8a      	ldrb	r2, [r1, r2]
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f8a:	7b3a      	ldrb	r2, [r7, #12]
 8005f8c:	490f      	ldr	r1, [pc, #60]	; (8005fcc <UARTEx_SetNbDataToProcess+0x98>)
 8005f8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	7b7a      	ldrb	r2, [r7, #13]
 8005fa0:	4909      	ldr	r1, [pc, #36]	; (8005fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8005fa2:	5c8a      	ldrb	r2, [r1, r2]
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fa8:	7b7a      	ldrb	r2, [r7, #13]
 8005faa:	4908      	ldr	r1, [pc, #32]	; (8005fcc <UARTEx_SetNbDataToProcess+0x98>)
 8005fac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	080069ac 	.word	0x080069ac
 8005fcc:	080069b4 	.word	0x080069b4

08005fd0 <__errno>:
 8005fd0:	4b01      	ldr	r3, [pc, #4]	; (8005fd8 <__errno+0x8>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4d0d      	ldr	r5, [pc, #52]	; (8006014 <__libc_init_array+0x38>)
 8005fe0:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	4d0b      	ldr	r5, [pc, #44]	; (800601c <__libc_init_array+0x40>)
 8005fee:	4c0c      	ldr	r4, [pc, #48]	; (8006020 <__libc_init_array+0x44>)
 8005ff0:	f000 fc9c 	bl	800692c <_init>
 8005ff4:	1b64      	subs	r4, r4, r5
 8005ff6:	10a4      	asrs	r4, r4, #2
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	080069f8 	.word	0x080069f8
 8006018:	080069f8 	.word	0x080069f8
 800601c:	080069f8 	.word	0x080069f8
 8006020:	080069fc 	.word	0x080069fc

08006024 <memset>:
 8006024:	4402      	add	r2, r0
 8006026:	4603      	mov	r3, r0
 8006028:	4293      	cmp	r3, r2
 800602a:	d100      	bne.n	800602e <memset+0xa>
 800602c:	4770      	bx	lr
 800602e:	f803 1b01 	strb.w	r1, [r3], #1
 8006032:	e7f9      	b.n	8006028 <memset+0x4>

08006034 <siprintf>:
 8006034:	b40e      	push	{r1, r2, r3}
 8006036:	b500      	push	{lr}
 8006038:	b09c      	sub	sp, #112	; 0x70
 800603a:	ab1d      	add	r3, sp, #116	; 0x74
 800603c:	9002      	str	r0, [sp, #8]
 800603e:	9006      	str	r0, [sp, #24]
 8006040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006044:	4809      	ldr	r0, [pc, #36]	; (800606c <siprintf+0x38>)
 8006046:	9107      	str	r1, [sp, #28]
 8006048:	9104      	str	r1, [sp, #16]
 800604a:	4909      	ldr	r1, [pc, #36]	; (8006070 <siprintf+0x3c>)
 800604c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006050:	9105      	str	r1, [sp, #20]
 8006052:	6800      	ldr	r0, [r0, #0]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	a902      	add	r1, sp, #8
 8006058:	f000 f876 	bl	8006148 <_svfiprintf_r>
 800605c:	9b02      	ldr	r3, [sp, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	b01c      	add	sp, #112	; 0x70
 8006064:	f85d eb04 	ldr.w	lr, [sp], #4
 8006068:	b003      	add	sp, #12
 800606a:	4770      	bx	lr
 800606c:	2000000c 	.word	0x2000000c
 8006070:	ffff0208 	.word	0xffff0208

08006074 <strcat>:
 8006074:	b510      	push	{r4, lr}
 8006076:	4602      	mov	r2, r0
 8006078:	7814      	ldrb	r4, [r2, #0]
 800607a:	4613      	mov	r3, r2
 800607c:	3201      	adds	r2, #1
 800607e:	2c00      	cmp	r4, #0
 8006080:	d1fa      	bne.n	8006078 <strcat+0x4>
 8006082:	3b01      	subs	r3, #1
 8006084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006088:	f803 2f01 	strb.w	r2, [r3, #1]!
 800608c:	2a00      	cmp	r2, #0
 800608e:	d1f9      	bne.n	8006084 <strcat+0x10>
 8006090:	bd10      	pop	{r4, pc}

08006092 <__ssputs_r>:
 8006092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006096:	688e      	ldr	r6, [r1, #8]
 8006098:	429e      	cmp	r6, r3
 800609a:	4682      	mov	sl, r0
 800609c:	460c      	mov	r4, r1
 800609e:	4690      	mov	r8, r2
 80060a0:	461f      	mov	r7, r3
 80060a2:	d838      	bhi.n	8006116 <__ssputs_r+0x84>
 80060a4:	898a      	ldrh	r2, [r1, #12]
 80060a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060aa:	d032      	beq.n	8006112 <__ssputs_r+0x80>
 80060ac:	6825      	ldr	r5, [r4, #0]
 80060ae:	6909      	ldr	r1, [r1, #16]
 80060b0:	eba5 0901 	sub.w	r9, r5, r1
 80060b4:	6965      	ldr	r5, [r4, #20]
 80060b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060be:	3301      	adds	r3, #1
 80060c0:	444b      	add	r3, r9
 80060c2:	106d      	asrs	r5, r5, #1
 80060c4:	429d      	cmp	r5, r3
 80060c6:	bf38      	it	cc
 80060c8:	461d      	movcc	r5, r3
 80060ca:	0553      	lsls	r3, r2, #21
 80060cc:	d531      	bpl.n	8006132 <__ssputs_r+0xa0>
 80060ce:	4629      	mov	r1, r5
 80060d0:	f000 fb62 	bl	8006798 <_malloc_r>
 80060d4:	4606      	mov	r6, r0
 80060d6:	b950      	cbnz	r0, 80060ee <__ssputs_r+0x5c>
 80060d8:	230c      	movs	r3, #12
 80060da:	f8ca 3000 	str.w	r3, [sl]
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ee:	6921      	ldr	r1, [r4, #16]
 80060f0:	464a      	mov	r2, r9
 80060f2:	f000 fabd 	bl	8006670 <memcpy>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	6126      	str	r6, [r4, #16]
 8006104:	6165      	str	r5, [r4, #20]
 8006106:	444e      	add	r6, r9
 8006108:	eba5 0509 	sub.w	r5, r5, r9
 800610c:	6026      	str	r6, [r4, #0]
 800610e:	60a5      	str	r5, [r4, #8]
 8006110:	463e      	mov	r6, r7
 8006112:	42be      	cmp	r6, r7
 8006114:	d900      	bls.n	8006118 <__ssputs_r+0x86>
 8006116:	463e      	mov	r6, r7
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	4632      	mov	r2, r6
 800611c:	4641      	mov	r1, r8
 800611e:	f000 fab5 	bl	800668c <memmove>
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	1b9b      	subs	r3, r3, r6
 8006126:	60a3      	str	r3, [r4, #8]
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	4433      	add	r3, r6
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	2000      	movs	r0, #0
 8006130:	e7db      	b.n	80060ea <__ssputs_r+0x58>
 8006132:	462a      	mov	r2, r5
 8006134:	f000 fba4 	bl	8006880 <_realloc_r>
 8006138:	4606      	mov	r6, r0
 800613a:	2800      	cmp	r0, #0
 800613c:	d1e1      	bne.n	8006102 <__ssputs_r+0x70>
 800613e:	6921      	ldr	r1, [r4, #16]
 8006140:	4650      	mov	r0, sl
 8006142:	f000 fabd 	bl	80066c0 <_free_r>
 8006146:	e7c7      	b.n	80060d8 <__ssputs_r+0x46>

08006148 <_svfiprintf_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	4698      	mov	r8, r3
 800614e:	898b      	ldrh	r3, [r1, #12]
 8006150:	061b      	lsls	r3, r3, #24
 8006152:	b09d      	sub	sp, #116	; 0x74
 8006154:	4607      	mov	r7, r0
 8006156:	460d      	mov	r5, r1
 8006158:	4614      	mov	r4, r2
 800615a:	d50e      	bpl.n	800617a <_svfiprintf_r+0x32>
 800615c:	690b      	ldr	r3, [r1, #16]
 800615e:	b963      	cbnz	r3, 800617a <_svfiprintf_r+0x32>
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	f000 fb19 	bl	8006798 <_malloc_r>
 8006166:	6028      	str	r0, [r5, #0]
 8006168:	6128      	str	r0, [r5, #16]
 800616a:	b920      	cbnz	r0, 8006176 <_svfiprintf_r+0x2e>
 800616c:	230c      	movs	r3, #12
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	e0d1      	b.n	800631a <_svfiprintf_r+0x1d2>
 8006176:	2340      	movs	r3, #64	; 0x40
 8006178:	616b      	str	r3, [r5, #20]
 800617a:	2300      	movs	r3, #0
 800617c:	9309      	str	r3, [sp, #36]	; 0x24
 800617e:	2320      	movs	r3, #32
 8006180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006184:	f8cd 800c 	str.w	r8, [sp, #12]
 8006188:	2330      	movs	r3, #48	; 0x30
 800618a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006334 <_svfiprintf_r+0x1ec>
 800618e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006192:	f04f 0901 	mov.w	r9, #1
 8006196:	4623      	mov	r3, r4
 8006198:	469a      	mov	sl, r3
 800619a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800619e:	b10a      	cbz	r2, 80061a4 <_svfiprintf_r+0x5c>
 80061a0:	2a25      	cmp	r2, #37	; 0x25
 80061a2:	d1f9      	bne.n	8006198 <_svfiprintf_r+0x50>
 80061a4:	ebba 0b04 	subs.w	fp, sl, r4
 80061a8:	d00b      	beq.n	80061c2 <_svfiprintf_r+0x7a>
 80061aa:	465b      	mov	r3, fp
 80061ac:	4622      	mov	r2, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	4638      	mov	r0, r7
 80061b2:	f7ff ff6e 	bl	8006092 <__ssputs_r>
 80061b6:	3001      	adds	r0, #1
 80061b8:	f000 80aa 	beq.w	8006310 <_svfiprintf_r+0x1c8>
 80061bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061be:	445a      	add	r2, fp
 80061c0:	9209      	str	r2, [sp, #36]	; 0x24
 80061c2:	f89a 3000 	ldrb.w	r3, [sl]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80a2 	beq.w	8006310 <_svfiprintf_r+0x1c8>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061d6:	f10a 0a01 	add.w	sl, sl, #1
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	9307      	str	r3, [sp, #28]
 80061de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061e2:	931a      	str	r3, [sp, #104]	; 0x68
 80061e4:	4654      	mov	r4, sl
 80061e6:	2205      	movs	r2, #5
 80061e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ec:	4851      	ldr	r0, [pc, #324]	; (8006334 <_svfiprintf_r+0x1ec>)
 80061ee:	f7fa f81f 	bl	8000230 <memchr>
 80061f2:	9a04      	ldr	r2, [sp, #16]
 80061f4:	b9d8      	cbnz	r0, 800622e <_svfiprintf_r+0xe6>
 80061f6:	06d0      	lsls	r0, r2, #27
 80061f8:	bf44      	itt	mi
 80061fa:	2320      	movmi	r3, #32
 80061fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006200:	0711      	lsls	r1, r2, #28
 8006202:	bf44      	itt	mi
 8006204:	232b      	movmi	r3, #43	; 0x2b
 8006206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800620a:	f89a 3000 	ldrb.w	r3, [sl]
 800620e:	2b2a      	cmp	r3, #42	; 0x2a
 8006210:	d015      	beq.n	800623e <_svfiprintf_r+0xf6>
 8006212:	9a07      	ldr	r2, [sp, #28]
 8006214:	4654      	mov	r4, sl
 8006216:	2000      	movs	r0, #0
 8006218:	f04f 0c0a 	mov.w	ip, #10
 800621c:	4621      	mov	r1, r4
 800621e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006222:	3b30      	subs	r3, #48	; 0x30
 8006224:	2b09      	cmp	r3, #9
 8006226:	d94e      	bls.n	80062c6 <_svfiprintf_r+0x17e>
 8006228:	b1b0      	cbz	r0, 8006258 <_svfiprintf_r+0x110>
 800622a:	9207      	str	r2, [sp, #28]
 800622c:	e014      	b.n	8006258 <_svfiprintf_r+0x110>
 800622e:	eba0 0308 	sub.w	r3, r0, r8
 8006232:	fa09 f303 	lsl.w	r3, r9, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	46a2      	mov	sl, r4
 800623c:	e7d2      	b.n	80061e4 <_svfiprintf_r+0x9c>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	1d19      	adds	r1, r3, #4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	9103      	str	r1, [sp, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	bfbb      	ittet	lt
 800624a:	425b      	neglt	r3, r3
 800624c:	f042 0202 	orrlt.w	r2, r2, #2
 8006250:	9307      	strge	r3, [sp, #28]
 8006252:	9307      	strlt	r3, [sp, #28]
 8006254:	bfb8      	it	lt
 8006256:	9204      	strlt	r2, [sp, #16]
 8006258:	7823      	ldrb	r3, [r4, #0]
 800625a:	2b2e      	cmp	r3, #46	; 0x2e
 800625c:	d10c      	bne.n	8006278 <_svfiprintf_r+0x130>
 800625e:	7863      	ldrb	r3, [r4, #1]
 8006260:	2b2a      	cmp	r3, #42	; 0x2a
 8006262:	d135      	bne.n	80062d0 <_svfiprintf_r+0x188>
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	1d1a      	adds	r2, r3, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	9203      	str	r2, [sp, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfb8      	it	lt
 8006270:	f04f 33ff 	movlt.w	r3, #4294967295
 8006274:	3402      	adds	r4, #2
 8006276:	9305      	str	r3, [sp, #20]
 8006278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006344 <_svfiprintf_r+0x1fc>
 800627c:	7821      	ldrb	r1, [r4, #0]
 800627e:	2203      	movs	r2, #3
 8006280:	4650      	mov	r0, sl
 8006282:	f7f9 ffd5 	bl	8000230 <memchr>
 8006286:	b140      	cbz	r0, 800629a <_svfiprintf_r+0x152>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	eba0 000a 	sub.w	r0, r0, sl
 800628e:	fa03 f000 	lsl.w	r0, r3, r0
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	4303      	orrs	r3, r0
 8006296:	3401      	adds	r4, #1
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629e:	4826      	ldr	r0, [pc, #152]	; (8006338 <_svfiprintf_r+0x1f0>)
 80062a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062a4:	2206      	movs	r2, #6
 80062a6:	f7f9 ffc3 	bl	8000230 <memchr>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d038      	beq.n	8006320 <_svfiprintf_r+0x1d8>
 80062ae:	4b23      	ldr	r3, [pc, #140]	; (800633c <_svfiprintf_r+0x1f4>)
 80062b0:	bb1b      	cbnz	r3, 80062fa <_svfiprintf_r+0x1b2>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	3307      	adds	r3, #7
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	3308      	adds	r3, #8
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c0:	4433      	add	r3, r6
 80062c2:	9309      	str	r3, [sp, #36]	; 0x24
 80062c4:	e767      	b.n	8006196 <_svfiprintf_r+0x4e>
 80062c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ca:	460c      	mov	r4, r1
 80062cc:	2001      	movs	r0, #1
 80062ce:	e7a5      	b.n	800621c <_svfiprintf_r+0xd4>
 80062d0:	2300      	movs	r3, #0
 80062d2:	3401      	adds	r4, #1
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	4619      	mov	r1, r3
 80062d8:	f04f 0c0a 	mov.w	ip, #10
 80062dc:	4620      	mov	r0, r4
 80062de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e2:	3a30      	subs	r2, #48	; 0x30
 80062e4:	2a09      	cmp	r2, #9
 80062e6:	d903      	bls.n	80062f0 <_svfiprintf_r+0x1a8>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0c5      	beq.n	8006278 <_svfiprintf_r+0x130>
 80062ec:	9105      	str	r1, [sp, #20]
 80062ee:	e7c3      	b.n	8006278 <_svfiprintf_r+0x130>
 80062f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062f4:	4604      	mov	r4, r0
 80062f6:	2301      	movs	r3, #1
 80062f8:	e7f0      	b.n	80062dc <_svfiprintf_r+0x194>
 80062fa:	ab03      	add	r3, sp, #12
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	462a      	mov	r2, r5
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <_svfiprintf_r+0x1f8>)
 8006302:	a904      	add	r1, sp, #16
 8006304:	4638      	mov	r0, r7
 8006306:	f3af 8000 	nop.w
 800630a:	1c42      	adds	r2, r0, #1
 800630c:	4606      	mov	r6, r0
 800630e:	d1d6      	bne.n	80062be <_svfiprintf_r+0x176>
 8006310:	89ab      	ldrh	r3, [r5, #12]
 8006312:	065b      	lsls	r3, r3, #25
 8006314:	f53f af2c 	bmi.w	8006170 <_svfiprintf_r+0x28>
 8006318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800631a:	b01d      	add	sp, #116	; 0x74
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	ab03      	add	r3, sp, #12
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	462a      	mov	r2, r5
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <_svfiprintf_r+0x1f8>)
 8006328:	a904      	add	r1, sp, #16
 800632a:	4638      	mov	r0, r7
 800632c:	f000 f87a 	bl	8006424 <_printf_i>
 8006330:	e7eb      	b.n	800630a <_svfiprintf_r+0x1c2>
 8006332:	bf00      	nop
 8006334:	080069bc 	.word	0x080069bc
 8006338:	080069c6 	.word	0x080069c6
 800633c:	00000000 	.word	0x00000000
 8006340:	08006093 	.word	0x08006093
 8006344:	080069c2 	.word	0x080069c2

08006348 <_printf_common>:
 8006348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800634c:	4616      	mov	r6, r2
 800634e:	4699      	mov	r9, r3
 8006350:	688a      	ldr	r2, [r1, #8]
 8006352:	690b      	ldr	r3, [r1, #16]
 8006354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006358:	4293      	cmp	r3, r2
 800635a:	bfb8      	it	lt
 800635c:	4613      	movlt	r3, r2
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006364:	4607      	mov	r7, r0
 8006366:	460c      	mov	r4, r1
 8006368:	b10a      	cbz	r2, 800636e <_printf_common+0x26>
 800636a:	3301      	adds	r3, #1
 800636c:	6033      	str	r3, [r6, #0]
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	0699      	lsls	r1, r3, #26
 8006372:	bf42      	ittt	mi
 8006374:	6833      	ldrmi	r3, [r6, #0]
 8006376:	3302      	addmi	r3, #2
 8006378:	6033      	strmi	r3, [r6, #0]
 800637a:	6825      	ldr	r5, [r4, #0]
 800637c:	f015 0506 	ands.w	r5, r5, #6
 8006380:	d106      	bne.n	8006390 <_printf_common+0x48>
 8006382:	f104 0a19 	add.w	sl, r4, #25
 8006386:	68e3      	ldr	r3, [r4, #12]
 8006388:	6832      	ldr	r2, [r6, #0]
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	42ab      	cmp	r3, r5
 800638e:	dc26      	bgt.n	80063de <_printf_common+0x96>
 8006390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006394:	1e13      	subs	r3, r2, #0
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	bf18      	it	ne
 800639a:	2301      	movne	r3, #1
 800639c:	0692      	lsls	r2, r2, #26
 800639e:	d42b      	bmi.n	80063f8 <_printf_common+0xb0>
 80063a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063a4:	4649      	mov	r1, r9
 80063a6:	4638      	mov	r0, r7
 80063a8:	47c0      	blx	r8
 80063aa:	3001      	adds	r0, #1
 80063ac:	d01e      	beq.n	80063ec <_printf_common+0xa4>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	68e5      	ldr	r5, [r4, #12]
 80063b2:	6832      	ldr	r2, [r6, #0]
 80063b4:	f003 0306 	and.w	r3, r3, #6
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	bf08      	it	eq
 80063bc:	1aad      	subeq	r5, r5, r2
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	6922      	ldr	r2, [r4, #16]
 80063c2:	bf0c      	ite	eq
 80063c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063c8:	2500      	movne	r5, #0
 80063ca:	4293      	cmp	r3, r2
 80063cc:	bfc4      	itt	gt
 80063ce:	1a9b      	subgt	r3, r3, r2
 80063d0:	18ed      	addgt	r5, r5, r3
 80063d2:	2600      	movs	r6, #0
 80063d4:	341a      	adds	r4, #26
 80063d6:	42b5      	cmp	r5, r6
 80063d8:	d11a      	bne.n	8006410 <_printf_common+0xc8>
 80063da:	2000      	movs	r0, #0
 80063dc:	e008      	b.n	80063f0 <_printf_common+0xa8>
 80063de:	2301      	movs	r3, #1
 80063e0:	4652      	mov	r2, sl
 80063e2:	4649      	mov	r1, r9
 80063e4:	4638      	mov	r0, r7
 80063e6:	47c0      	blx	r8
 80063e8:	3001      	adds	r0, #1
 80063ea:	d103      	bne.n	80063f4 <_printf_common+0xac>
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f4:	3501      	adds	r5, #1
 80063f6:	e7c6      	b.n	8006386 <_printf_common+0x3e>
 80063f8:	18e1      	adds	r1, r4, r3
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	2030      	movs	r0, #48	; 0x30
 80063fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006402:	4422      	add	r2, r4
 8006404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800640c:	3302      	adds	r3, #2
 800640e:	e7c7      	b.n	80063a0 <_printf_common+0x58>
 8006410:	2301      	movs	r3, #1
 8006412:	4622      	mov	r2, r4
 8006414:	4649      	mov	r1, r9
 8006416:	4638      	mov	r0, r7
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d0e6      	beq.n	80063ec <_printf_common+0xa4>
 800641e:	3601      	adds	r6, #1
 8006420:	e7d9      	b.n	80063d6 <_printf_common+0x8e>
	...

08006424 <_printf_i>:
 8006424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	7e0f      	ldrb	r7, [r1, #24]
 800642a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800642c:	2f78      	cmp	r7, #120	; 0x78
 800642e:	4691      	mov	r9, r2
 8006430:	4680      	mov	r8, r0
 8006432:	460c      	mov	r4, r1
 8006434:	469a      	mov	sl, r3
 8006436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800643a:	d807      	bhi.n	800644c <_printf_i+0x28>
 800643c:	2f62      	cmp	r7, #98	; 0x62
 800643e:	d80a      	bhi.n	8006456 <_printf_i+0x32>
 8006440:	2f00      	cmp	r7, #0
 8006442:	f000 80d8 	beq.w	80065f6 <_printf_i+0x1d2>
 8006446:	2f58      	cmp	r7, #88	; 0x58
 8006448:	f000 80a3 	beq.w	8006592 <_printf_i+0x16e>
 800644c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006454:	e03a      	b.n	80064cc <_printf_i+0xa8>
 8006456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800645a:	2b15      	cmp	r3, #21
 800645c:	d8f6      	bhi.n	800644c <_printf_i+0x28>
 800645e:	a101      	add	r1, pc, #4	; (adr r1, 8006464 <_printf_i+0x40>)
 8006460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006464:	080064bd 	.word	0x080064bd
 8006468:	080064d1 	.word	0x080064d1
 800646c:	0800644d 	.word	0x0800644d
 8006470:	0800644d 	.word	0x0800644d
 8006474:	0800644d 	.word	0x0800644d
 8006478:	0800644d 	.word	0x0800644d
 800647c:	080064d1 	.word	0x080064d1
 8006480:	0800644d 	.word	0x0800644d
 8006484:	0800644d 	.word	0x0800644d
 8006488:	0800644d 	.word	0x0800644d
 800648c:	0800644d 	.word	0x0800644d
 8006490:	080065dd 	.word	0x080065dd
 8006494:	08006501 	.word	0x08006501
 8006498:	080065bf 	.word	0x080065bf
 800649c:	0800644d 	.word	0x0800644d
 80064a0:	0800644d 	.word	0x0800644d
 80064a4:	080065ff 	.word	0x080065ff
 80064a8:	0800644d 	.word	0x0800644d
 80064ac:	08006501 	.word	0x08006501
 80064b0:	0800644d 	.word	0x0800644d
 80064b4:	0800644d 	.word	0x0800644d
 80064b8:	080065c7 	.word	0x080065c7
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	1d1a      	adds	r2, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	602a      	str	r2, [r5, #0]
 80064c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0a3      	b.n	8006618 <_printf_i+0x1f4>
 80064d0:	6820      	ldr	r0, [r4, #0]
 80064d2:	6829      	ldr	r1, [r5, #0]
 80064d4:	0606      	lsls	r6, r0, #24
 80064d6:	f101 0304 	add.w	r3, r1, #4
 80064da:	d50a      	bpl.n	80064f2 <_printf_i+0xce>
 80064dc:	680e      	ldr	r6, [r1, #0]
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	2e00      	cmp	r6, #0
 80064e2:	da03      	bge.n	80064ec <_printf_i+0xc8>
 80064e4:	232d      	movs	r3, #45	; 0x2d
 80064e6:	4276      	negs	r6, r6
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ec:	485e      	ldr	r0, [pc, #376]	; (8006668 <_printf_i+0x244>)
 80064ee:	230a      	movs	r3, #10
 80064f0:	e019      	b.n	8006526 <_printf_i+0x102>
 80064f2:	680e      	ldr	r6, [r1, #0]
 80064f4:	602b      	str	r3, [r5, #0]
 80064f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064fa:	bf18      	it	ne
 80064fc:	b236      	sxthne	r6, r6
 80064fe:	e7ef      	b.n	80064e0 <_printf_i+0xbc>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	6820      	ldr	r0, [r4, #0]
 8006504:	1d19      	adds	r1, r3, #4
 8006506:	6029      	str	r1, [r5, #0]
 8006508:	0601      	lsls	r1, r0, #24
 800650a:	d501      	bpl.n	8006510 <_printf_i+0xec>
 800650c:	681e      	ldr	r6, [r3, #0]
 800650e:	e002      	b.n	8006516 <_printf_i+0xf2>
 8006510:	0646      	lsls	r6, r0, #25
 8006512:	d5fb      	bpl.n	800650c <_printf_i+0xe8>
 8006514:	881e      	ldrh	r6, [r3, #0]
 8006516:	4854      	ldr	r0, [pc, #336]	; (8006668 <_printf_i+0x244>)
 8006518:	2f6f      	cmp	r7, #111	; 0x6f
 800651a:	bf0c      	ite	eq
 800651c:	2308      	moveq	r3, #8
 800651e:	230a      	movne	r3, #10
 8006520:	2100      	movs	r1, #0
 8006522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006526:	6865      	ldr	r5, [r4, #4]
 8006528:	60a5      	str	r5, [r4, #8]
 800652a:	2d00      	cmp	r5, #0
 800652c:	bfa2      	ittt	ge
 800652e:	6821      	ldrge	r1, [r4, #0]
 8006530:	f021 0104 	bicge.w	r1, r1, #4
 8006534:	6021      	strge	r1, [r4, #0]
 8006536:	b90e      	cbnz	r6, 800653c <_printf_i+0x118>
 8006538:	2d00      	cmp	r5, #0
 800653a:	d04d      	beq.n	80065d8 <_printf_i+0x1b4>
 800653c:	4615      	mov	r5, r2
 800653e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006542:	fb03 6711 	mls	r7, r3, r1, r6
 8006546:	5dc7      	ldrb	r7, [r0, r7]
 8006548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800654c:	4637      	mov	r7, r6
 800654e:	42bb      	cmp	r3, r7
 8006550:	460e      	mov	r6, r1
 8006552:	d9f4      	bls.n	800653e <_printf_i+0x11a>
 8006554:	2b08      	cmp	r3, #8
 8006556:	d10b      	bne.n	8006570 <_printf_i+0x14c>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	07de      	lsls	r6, r3, #31
 800655c:	d508      	bpl.n	8006570 <_printf_i+0x14c>
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	6861      	ldr	r1, [r4, #4]
 8006562:	4299      	cmp	r1, r3
 8006564:	bfde      	ittt	le
 8006566:	2330      	movle	r3, #48	; 0x30
 8006568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800656c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006570:	1b52      	subs	r2, r2, r5
 8006572:	6122      	str	r2, [r4, #16]
 8006574:	f8cd a000 	str.w	sl, [sp]
 8006578:	464b      	mov	r3, r9
 800657a:	aa03      	add	r2, sp, #12
 800657c:	4621      	mov	r1, r4
 800657e:	4640      	mov	r0, r8
 8006580:	f7ff fee2 	bl	8006348 <_printf_common>
 8006584:	3001      	adds	r0, #1
 8006586:	d14c      	bne.n	8006622 <_printf_i+0x1fe>
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	b004      	add	sp, #16
 800658e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006592:	4835      	ldr	r0, [pc, #212]	; (8006668 <_printf_i+0x244>)
 8006594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006598:	6829      	ldr	r1, [r5, #0]
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	f851 6b04 	ldr.w	r6, [r1], #4
 80065a0:	6029      	str	r1, [r5, #0]
 80065a2:	061d      	lsls	r5, r3, #24
 80065a4:	d514      	bpl.n	80065d0 <_printf_i+0x1ac>
 80065a6:	07df      	lsls	r7, r3, #31
 80065a8:	bf44      	itt	mi
 80065aa:	f043 0320 	orrmi.w	r3, r3, #32
 80065ae:	6023      	strmi	r3, [r4, #0]
 80065b0:	b91e      	cbnz	r6, 80065ba <_printf_i+0x196>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	f023 0320 	bic.w	r3, r3, #32
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	2310      	movs	r3, #16
 80065bc:	e7b0      	b.n	8006520 <_printf_i+0xfc>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	f043 0320 	orr.w	r3, r3, #32
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	2378      	movs	r3, #120	; 0x78
 80065c8:	4828      	ldr	r0, [pc, #160]	; (800666c <_printf_i+0x248>)
 80065ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ce:	e7e3      	b.n	8006598 <_printf_i+0x174>
 80065d0:	0659      	lsls	r1, r3, #25
 80065d2:	bf48      	it	mi
 80065d4:	b2b6      	uxthmi	r6, r6
 80065d6:	e7e6      	b.n	80065a6 <_printf_i+0x182>
 80065d8:	4615      	mov	r5, r2
 80065da:	e7bb      	b.n	8006554 <_printf_i+0x130>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	6826      	ldr	r6, [r4, #0]
 80065e0:	6961      	ldr	r1, [r4, #20]
 80065e2:	1d18      	adds	r0, r3, #4
 80065e4:	6028      	str	r0, [r5, #0]
 80065e6:	0635      	lsls	r5, r6, #24
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	d501      	bpl.n	80065f0 <_printf_i+0x1cc>
 80065ec:	6019      	str	r1, [r3, #0]
 80065ee:	e002      	b.n	80065f6 <_printf_i+0x1d2>
 80065f0:	0670      	lsls	r0, r6, #25
 80065f2:	d5fb      	bpl.n	80065ec <_printf_i+0x1c8>
 80065f4:	8019      	strh	r1, [r3, #0]
 80065f6:	2300      	movs	r3, #0
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	4615      	mov	r5, r2
 80065fc:	e7ba      	b.n	8006574 <_printf_i+0x150>
 80065fe:	682b      	ldr	r3, [r5, #0]
 8006600:	1d1a      	adds	r2, r3, #4
 8006602:	602a      	str	r2, [r5, #0]
 8006604:	681d      	ldr	r5, [r3, #0]
 8006606:	6862      	ldr	r2, [r4, #4]
 8006608:	2100      	movs	r1, #0
 800660a:	4628      	mov	r0, r5
 800660c:	f7f9 fe10 	bl	8000230 <memchr>
 8006610:	b108      	cbz	r0, 8006616 <_printf_i+0x1f2>
 8006612:	1b40      	subs	r0, r0, r5
 8006614:	6060      	str	r0, [r4, #4]
 8006616:	6863      	ldr	r3, [r4, #4]
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	2300      	movs	r3, #0
 800661c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006620:	e7a8      	b.n	8006574 <_printf_i+0x150>
 8006622:	6923      	ldr	r3, [r4, #16]
 8006624:	462a      	mov	r2, r5
 8006626:	4649      	mov	r1, r9
 8006628:	4640      	mov	r0, r8
 800662a:	47d0      	blx	sl
 800662c:	3001      	adds	r0, #1
 800662e:	d0ab      	beq.n	8006588 <_printf_i+0x164>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	079b      	lsls	r3, r3, #30
 8006634:	d413      	bmi.n	800665e <_printf_i+0x23a>
 8006636:	68e0      	ldr	r0, [r4, #12]
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	4298      	cmp	r0, r3
 800663c:	bfb8      	it	lt
 800663e:	4618      	movlt	r0, r3
 8006640:	e7a4      	b.n	800658c <_printf_i+0x168>
 8006642:	2301      	movs	r3, #1
 8006644:	4632      	mov	r2, r6
 8006646:	4649      	mov	r1, r9
 8006648:	4640      	mov	r0, r8
 800664a:	47d0      	blx	sl
 800664c:	3001      	adds	r0, #1
 800664e:	d09b      	beq.n	8006588 <_printf_i+0x164>
 8006650:	3501      	adds	r5, #1
 8006652:	68e3      	ldr	r3, [r4, #12]
 8006654:	9903      	ldr	r1, [sp, #12]
 8006656:	1a5b      	subs	r3, r3, r1
 8006658:	42ab      	cmp	r3, r5
 800665a:	dcf2      	bgt.n	8006642 <_printf_i+0x21e>
 800665c:	e7eb      	b.n	8006636 <_printf_i+0x212>
 800665e:	2500      	movs	r5, #0
 8006660:	f104 0619 	add.w	r6, r4, #25
 8006664:	e7f5      	b.n	8006652 <_printf_i+0x22e>
 8006666:	bf00      	nop
 8006668:	080069cd 	.word	0x080069cd
 800666c:	080069de 	.word	0x080069de

08006670 <memcpy>:
 8006670:	440a      	add	r2, r1
 8006672:	4291      	cmp	r1, r2
 8006674:	f100 33ff 	add.w	r3, r0, #4294967295
 8006678:	d100      	bne.n	800667c <memcpy+0xc>
 800667a:	4770      	bx	lr
 800667c:	b510      	push	{r4, lr}
 800667e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006686:	4291      	cmp	r1, r2
 8006688:	d1f9      	bne.n	800667e <memcpy+0xe>
 800668a:	bd10      	pop	{r4, pc}

0800668c <memmove>:
 800668c:	4288      	cmp	r0, r1
 800668e:	b510      	push	{r4, lr}
 8006690:	eb01 0402 	add.w	r4, r1, r2
 8006694:	d902      	bls.n	800669c <memmove+0x10>
 8006696:	4284      	cmp	r4, r0
 8006698:	4623      	mov	r3, r4
 800669a:	d807      	bhi.n	80066ac <memmove+0x20>
 800669c:	1e43      	subs	r3, r0, #1
 800669e:	42a1      	cmp	r1, r4
 80066a0:	d008      	beq.n	80066b4 <memmove+0x28>
 80066a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066aa:	e7f8      	b.n	800669e <memmove+0x12>
 80066ac:	4402      	add	r2, r0
 80066ae:	4601      	mov	r1, r0
 80066b0:	428a      	cmp	r2, r1
 80066b2:	d100      	bne.n	80066b6 <memmove+0x2a>
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066be:	e7f7      	b.n	80066b0 <memmove+0x24>

080066c0 <_free_r>:
 80066c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066c2:	2900      	cmp	r1, #0
 80066c4:	d044      	beq.n	8006750 <_free_r+0x90>
 80066c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ca:	9001      	str	r0, [sp, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f1a1 0404 	sub.w	r4, r1, #4
 80066d2:	bfb8      	it	lt
 80066d4:	18e4      	addlt	r4, r4, r3
 80066d6:	f000 f913 	bl	8006900 <__malloc_lock>
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <_free_r+0x94>)
 80066dc:	9801      	ldr	r0, [sp, #4]
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	b933      	cbnz	r3, 80066f0 <_free_r+0x30>
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	6014      	str	r4, [r2, #0]
 80066e6:	b003      	add	sp, #12
 80066e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066ec:	f000 b90e 	b.w	800690c <__malloc_unlock>
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d908      	bls.n	8006706 <_free_r+0x46>
 80066f4:	6825      	ldr	r5, [r4, #0]
 80066f6:	1961      	adds	r1, r4, r5
 80066f8:	428b      	cmp	r3, r1
 80066fa:	bf01      	itttt	eq
 80066fc:	6819      	ldreq	r1, [r3, #0]
 80066fe:	685b      	ldreq	r3, [r3, #4]
 8006700:	1949      	addeq	r1, r1, r5
 8006702:	6021      	streq	r1, [r4, #0]
 8006704:	e7ed      	b.n	80066e2 <_free_r+0x22>
 8006706:	461a      	mov	r2, r3
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	b10b      	cbz	r3, 8006710 <_free_r+0x50>
 800670c:	42a3      	cmp	r3, r4
 800670e:	d9fa      	bls.n	8006706 <_free_r+0x46>
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	1855      	adds	r5, r2, r1
 8006714:	42a5      	cmp	r5, r4
 8006716:	d10b      	bne.n	8006730 <_free_r+0x70>
 8006718:	6824      	ldr	r4, [r4, #0]
 800671a:	4421      	add	r1, r4
 800671c:	1854      	adds	r4, r2, r1
 800671e:	42a3      	cmp	r3, r4
 8006720:	6011      	str	r1, [r2, #0]
 8006722:	d1e0      	bne.n	80066e6 <_free_r+0x26>
 8006724:	681c      	ldr	r4, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	6053      	str	r3, [r2, #4]
 800672a:	4421      	add	r1, r4
 800672c:	6011      	str	r1, [r2, #0]
 800672e:	e7da      	b.n	80066e6 <_free_r+0x26>
 8006730:	d902      	bls.n	8006738 <_free_r+0x78>
 8006732:	230c      	movs	r3, #12
 8006734:	6003      	str	r3, [r0, #0]
 8006736:	e7d6      	b.n	80066e6 <_free_r+0x26>
 8006738:	6825      	ldr	r5, [r4, #0]
 800673a:	1961      	adds	r1, r4, r5
 800673c:	428b      	cmp	r3, r1
 800673e:	bf04      	itt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	bf04      	itt	eq
 8006748:	1949      	addeq	r1, r1, r5
 800674a:	6021      	streq	r1, [r4, #0]
 800674c:	6054      	str	r4, [r2, #4]
 800674e:	e7ca      	b.n	80066e6 <_free_r+0x26>
 8006750:	b003      	add	sp, #12
 8006752:	bd30      	pop	{r4, r5, pc}
 8006754:	20000298 	.word	0x20000298

08006758 <sbrk_aligned>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4e0e      	ldr	r6, [pc, #56]	; (8006794 <sbrk_aligned+0x3c>)
 800675c:	460c      	mov	r4, r1
 800675e:	6831      	ldr	r1, [r6, #0]
 8006760:	4605      	mov	r5, r0
 8006762:	b911      	cbnz	r1, 800676a <sbrk_aligned+0x12>
 8006764:	f000 f8bc 	bl	80068e0 <_sbrk_r>
 8006768:	6030      	str	r0, [r6, #0]
 800676a:	4621      	mov	r1, r4
 800676c:	4628      	mov	r0, r5
 800676e:	f000 f8b7 	bl	80068e0 <_sbrk_r>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d00a      	beq.n	800678c <sbrk_aligned+0x34>
 8006776:	1cc4      	adds	r4, r0, #3
 8006778:	f024 0403 	bic.w	r4, r4, #3
 800677c:	42a0      	cmp	r0, r4
 800677e:	d007      	beq.n	8006790 <sbrk_aligned+0x38>
 8006780:	1a21      	subs	r1, r4, r0
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f8ac 	bl	80068e0 <_sbrk_r>
 8006788:	3001      	adds	r0, #1
 800678a:	d101      	bne.n	8006790 <sbrk_aligned+0x38>
 800678c:	f04f 34ff 	mov.w	r4, #4294967295
 8006790:	4620      	mov	r0, r4
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	2000029c 	.word	0x2000029c

08006798 <_malloc_r>:
 8006798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679c:	1ccd      	adds	r5, r1, #3
 800679e:	f025 0503 	bic.w	r5, r5, #3
 80067a2:	3508      	adds	r5, #8
 80067a4:	2d0c      	cmp	r5, #12
 80067a6:	bf38      	it	cc
 80067a8:	250c      	movcc	r5, #12
 80067aa:	2d00      	cmp	r5, #0
 80067ac:	4607      	mov	r7, r0
 80067ae:	db01      	blt.n	80067b4 <_malloc_r+0x1c>
 80067b0:	42a9      	cmp	r1, r5
 80067b2:	d905      	bls.n	80067c0 <_malloc_r+0x28>
 80067b4:	230c      	movs	r3, #12
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	2600      	movs	r6, #0
 80067ba:	4630      	mov	r0, r6
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	4e2e      	ldr	r6, [pc, #184]	; (800687c <_malloc_r+0xe4>)
 80067c2:	f000 f89d 	bl	8006900 <__malloc_lock>
 80067c6:	6833      	ldr	r3, [r6, #0]
 80067c8:	461c      	mov	r4, r3
 80067ca:	bb34      	cbnz	r4, 800681a <_malloc_r+0x82>
 80067cc:	4629      	mov	r1, r5
 80067ce:	4638      	mov	r0, r7
 80067d0:	f7ff ffc2 	bl	8006758 <sbrk_aligned>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	4604      	mov	r4, r0
 80067d8:	d14d      	bne.n	8006876 <_malloc_r+0xde>
 80067da:	6834      	ldr	r4, [r6, #0]
 80067dc:	4626      	mov	r6, r4
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d140      	bne.n	8006864 <_malloc_r+0xcc>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	4631      	mov	r1, r6
 80067e6:	4638      	mov	r0, r7
 80067e8:	eb04 0803 	add.w	r8, r4, r3
 80067ec:	f000 f878 	bl	80068e0 <_sbrk_r>
 80067f0:	4580      	cmp	r8, r0
 80067f2:	d13a      	bne.n	800686a <_malloc_r+0xd2>
 80067f4:	6821      	ldr	r1, [r4, #0]
 80067f6:	3503      	adds	r5, #3
 80067f8:	1a6d      	subs	r5, r5, r1
 80067fa:	f025 0503 	bic.w	r5, r5, #3
 80067fe:	3508      	adds	r5, #8
 8006800:	2d0c      	cmp	r5, #12
 8006802:	bf38      	it	cc
 8006804:	250c      	movcc	r5, #12
 8006806:	4629      	mov	r1, r5
 8006808:	4638      	mov	r0, r7
 800680a:	f7ff ffa5 	bl	8006758 <sbrk_aligned>
 800680e:	3001      	adds	r0, #1
 8006810:	d02b      	beq.n	800686a <_malloc_r+0xd2>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	442b      	add	r3, r5
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	e00e      	b.n	8006838 <_malloc_r+0xa0>
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	1b52      	subs	r2, r2, r5
 800681e:	d41e      	bmi.n	800685e <_malloc_r+0xc6>
 8006820:	2a0b      	cmp	r2, #11
 8006822:	d916      	bls.n	8006852 <_malloc_r+0xba>
 8006824:	1961      	adds	r1, r4, r5
 8006826:	42a3      	cmp	r3, r4
 8006828:	6025      	str	r5, [r4, #0]
 800682a:	bf18      	it	ne
 800682c:	6059      	strne	r1, [r3, #4]
 800682e:	6863      	ldr	r3, [r4, #4]
 8006830:	bf08      	it	eq
 8006832:	6031      	streq	r1, [r6, #0]
 8006834:	5162      	str	r2, [r4, r5]
 8006836:	604b      	str	r3, [r1, #4]
 8006838:	4638      	mov	r0, r7
 800683a:	f104 060b 	add.w	r6, r4, #11
 800683e:	f000 f865 	bl	800690c <__malloc_unlock>
 8006842:	f026 0607 	bic.w	r6, r6, #7
 8006846:	1d23      	adds	r3, r4, #4
 8006848:	1af2      	subs	r2, r6, r3
 800684a:	d0b6      	beq.n	80067ba <_malloc_r+0x22>
 800684c:	1b9b      	subs	r3, r3, r6
 800684e:	50a3      	str	r3, [r4, r2]
 8006850:	e7b3      	b.n	80067ba <_malloc_r+0x22>
 8006852:	6862      	ldr	r2, [r4, #4]
 8006854:	42a3      	cmp	r3, r4
 8006856:	bf0c      	ite	eq
 8006858:	6032      	streq	r2, [r6, #0]
 800685a:	605a      	strne	r2, [r3, #4]
 800685c:	e7ec      	b.n	8006838 <_malloc_r+0xa0>
 800685e:	4623      	mov	r3, r4
 8006860:	6864      	ldr	r4, [r4, #4]
 8006862:	e7b2      	b.n	80067ca <_malloc_r+0x32>
 8006864:	4634      	mov	r4, r6
 8006866:	6876      	ldr	r6, [r6, #4]
 8006868:	e7b9      	b.n	80067de <_malloc_r+0x46>
 800686a:	230c      	movs	r3, #12
 800686c:	603b      	str	r3, [r7, #0]
 800686e:	4638      	mov	r0, r7
 8006870:	f000 f84c 	bl	800690c <__malloc_unlock>
 8006874:	e7a1      	b.n	80067ba <_malloc_r+0x22>
 8006876:	6025      	str	r5, [r4, #0]
 8006878:	e7de      	b.n	8006838 <_malloc_r+0xa0>
 800687a:	bf00      	nop
 800687c:	20000298 	.word	0x20000298

08006880 <_realloc_r>:
 8006880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	4680      	mov	r8, r0
 8006886:	4614      	mov	r4, r2
 8006888:	460e      	mov	r6, r1
 800688a:	b921      	cbnz	r1, 8006896 <_realloc_r+0x16>
 800688c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006890:	4611      	mov	r1, r2
 8006892:	f7ff bf81 	b.w	8006798 <_malloc_r>
 8006896:	b92a      	cbnz	r2, 80068a4 <_realloc_r+0x24>
 8006898:	f7ff ff12 	bl	80066c0 <_free_r>
 800689c:	4625      	mov	r5, r4
 800689e:	4628      	mov	r0, r5
 80068a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a4:	f000 f838 	bl	8006918 <_malloc_usable_size_r>
 80068a8:	4284      	cmp	r4, r0
 80068aa:	4607      	mov	r7, r0
 80068ac:	d802      	bhi.n	80068b4 <_realloc_r+0x34>
 80068ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068b2:	d812      	bhi.n	80068da <_realloc_r+0x5a>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4640      	mov	r0, r8
 80068b8:	f7ff ff6e 	bl	8006798 <_malloc_r>
 80068bc:	4605      	mov	r5, r0
 80068be:	2800      	cmp	r0, #0
 80068c0:	d0ed      	beq.n	800689e <_realloc_r+0x1e>
 80068c2:	42bc      	cmp	r4, r7
 80068c4:	4622      	mov	r2, r4
 80068c6:	4631      	mov	r1, r6
 80068c8:	bf28      	it	cs
 80068ca:	463a      	movcs	r2, r7
 80068cc:	f7ff fed0 	bl	8006670 <memcpy>
 80068d0:	4631      	mov	r1, r6
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7ff fef4 	bl	80066c0 <_free_r>
 80068d8:	e7e1      	b.n	800689e <_realloc_r+0x1e>
 80068da:	4635      	mov	r5, r6
 80068dc:	e7df      	b.n	800689e <_realloc_r+0x1e>
	...

080068e0 <_sbrk_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d06      	ldr	r5, [pc, #24]	; (80068fc <_sbrk_r+0x1c>)
 80068e4:	2300      	movs	r3, #0
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	f7fb f924 	bl	8001b38 <_sbrk>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_sbrk_r+0x1a>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_sbrk_r+0x1a>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	200002a0 	.word	0x200002a0

08006900 <__malloc_lock>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__malloc_lock+0x8>)
 8006902:	f000 b811 	b.w	8006928 <__retarget_lock_acquire_recursive>
 8006906:	bf00      	nop
 8006908:	200002a4 	.word	0x200002a4

0800690c <__malloc_unlock>:
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <__malloc_unlock+0x8>)
 800690e:	f000 b80c 	b.w	800692a <__retarget_lock_release_recursive>
 8006912:	bf00      	nop
 8006914:	200002a4 	.word	0x200002a4

08006918 <_malloc_usable_size_r>:
 8006918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800691c:	1f18      	subs	r0, r3, #4
 800691e:	2b00      	cmp	r3, #0
 8006920:	bfbc      	itt	lt
 8006922:	580b      	ldrlt	r3, [r1, r0]
 8006924:	18c0      	addlt	r0, r0, r3
 8006926:	4770      	bx	lr

08006928 <__retarget_lock_acquire_recursive>:
 8006928:	4770      	bx	lr

0800692a <__retarget_lock_release_recursive>:
 800692a:	4770      	bx	lr

0800692c <_init>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr

08006938 <_fini>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	bf00      	nop
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr
